<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LcmsNetSdk</name>
    </assembly>
    <members>
        <member name="T:LcmsNetSDK.Configuration.CartConfiguration">
            <summary>
            Class that encapsulates the configuration of the cart from
            systems to columns.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Configuration.CartConfiguration.NumberOfEnabledColumns">
            <summary>
            Gets the number of enabled columns.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Configuration.CartConfiguration.Columns">
            <summary>
            Gets or sets the list of columns available.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Configuration.CartConfiguration.BuildColumnList(System.Boolean)">
            <summary>
            Builds a list of columns from the cart configuration object.
            </summary>
            <param name="orderByFirst">Orders the list by the first selected column. e.g. list[0] = column3 iff column3.First = True</param>
            <returns>List of columns stored in cart configuration.</returns>
        </member>
        <member name="P:LcmsNetSDK.Configuration.CartConfiguration.CartName">
            <summary>
            Gets or sets the name of the cart.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Configuration.CartConfiguration.CartConfigName">
            <summary>
            Gets or sets the name of the cart configuration in use
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Configuration.ColumnData">
            <summary>
            Class that manages all of the information about a given column
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Configuration.ColumnData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Configuration.ColumnData.Clone">
            <summary>
            Clone - get a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="T:LcmsNetSDK.Configuration.ColumnData.DelegateFirstChanged">
            <summary>
            Delegate definition called if the column first value is changed.
            </summary>
            <param name="sender"></param>
            <param name="first"></param>
        </member>
        <member name="F:LcmsNetSDK.Configuration.ColumnData.m_columnIndex">
            <summary>
            Index of the column.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Configuration.ColumnData.m_name">
            <summary>
            Name of the column
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Configuration.ColumnData.m_systemIndex">
            <summary>
            System index of the column.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Configuration.ColumnData.m_status">
            <summary>
            Status of the column
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Configuration.ColumnData.StatusChanged">
            <summary>
            Fired when the status of a column changes.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Configuration.ColumnData.ColorChanged">
            <summary>
            Fired when the color of the column changes.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Configuration.ColumnData.FirstChanged">
            <summary>
            Fired if the first value of this column is changed.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Configuration.ColumnData.NameChanged">
            <summary>
            An event that indicates the name of the column has changed.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Configuration.ColumnData.m_columnColor">
            <summary>
            Color of the column.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Configuration.ColumnData.colorString">
            <summary>
            Handles serialization of the column color.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Configuration.ColumnData.m_first">
            <summary>
            Flag indicating if this is the first column to run.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Configuration.ColumnData.First">
            <summary>
            Gets or sets if the column is the first column designated to run.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Configuration.ColumnData.Status">
            <summary>
            Gets or sets when the status changes.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Configuration.ColumnData.ID">
            <summary>
            Gets or sets the column index.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Configuration.ColumnData.SystemID">
            <summary>
            Gets or sets the system index.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Configuration.ColumnData.Name">
            <summary>
            Gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Configuration.ColumnData.Color">
            <summary>
            Gets or sets the color of the column.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Configuration.ColumnStatus">
            <summary>
            Enumeration describing the status of a column.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Data.ConvertVialPosition">
            <summary>
            Utilities for converting Vial (aka Well) position between LCMSNet and LCMS values
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.ConvertVialPosition.ConvertVialToString(System.Int32,System.Byte)">
            <summary>
            Converts a vial position in LCMS format (integer 1 - 96) to LCMSNet format (string A01 - H12)
            Supports vials beyond 97, where vial 312 is vial Z12, then vial 313 is AA01, 314 is AA02, etc.
            Highest vial number supported is 8424, which is ZZ12
            </summary>
            <param name="vialPosition">Vial position as integer</param>
            <param name="columnsPerRow">Columns per row (default is 12)</param>
            <returns>LCMSNet string-formatted vial position, or Z99 if an error</returns>
            <remarks>
            Vial 1 is position A01
            ...
            Vial 12 is position A12
            Vial 13 is position B01
            ...
            Vial 24 is position B12
            Vial 25 is position C01
            ...
            Vial 96 is position H12
            </remarks>
        </member>
        <member name="M:LcmsNetSDK.Data.ConvertVialPosition.ConvertVialToInt(System.String,System.Byte)">
            <summary>
            Converts a vial position in LCMSNet format (string A1 - H12) to LCMS format (integer 1 - 96)
            Supports positions beyond H12, where position Z12 is vial 312, then position AA01 is vial 313, AA02 is 314, etc.
            Highest vial position supported is ZZ12, which is vial 8424
            </summary>
            <param name="vialPosition">Vial position as string</param>
            <param name="columnsPerRow">Columns per row (default is 12)</param>
            <returns>Vial position represented as an integer, or 9999 if the format of vialPosition is not recognized</returns>
        </member>
        <member name="M:LcmsNetSDK.Data.ConvertVialPosition.VerifyLCMSNetVialPosition">
            <summary>
            Use this function to view example column positions when columns per row is 12, 24, 36, ... 96
            Also validates the round trip conversion from vial number to vial position then back to vial number
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Data.DMSData">
            <summary>
            Dataset information supplied by or required by DMS; includes run request information
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.DMSData.ValidDatasetNameRegexString">
            <summary>
            The matching string to ensure only valid characters exist in a dataset name
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.DMSData.ValidDatasetNameCharacters">
            <summary>
            The list of characters allowed in a dataset name
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.DMSData.NameValidationRegex">
            <summary>
            Regex to use to test if a dataset name only contains valid characters
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.DMSData.Clone">
            <summary>
            Clone - get a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Data.DMSData.CloneLocked">
            <summary>
            Clones the data and locks it
            </summary>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Data.DMSData.CloneLockedWithPath(System.String)">
            <summary>
            Clones the data and locks it, and sets the dataset name to the filename in <paramref name="filePath"/>
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.LockData">
            <summary>
            When the data comes from DMS, it will be locked. This is meant to stop the user
            from altering it. (this is not used in LCMSNet; it is used in Buzzard)
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.SelectedToRun">
            <summary>
            Flag for determining if request from DMS has been selected for running
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.RequestName">
            <summary>
            Name of request in DMS. Becomes sample name in LCMS and forms part
            of dataset name sample after run
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.DatasetName">
            <summary>
            Gets or sets the name of the dataset after editing the request name.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.RequestID">
            <summary>
            Numeric ID of request in DMS
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.Experiment">
            <summary>
            Experiment name
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.DatasetType">
            <summary>
            Dataset type (ie, HMS-MSn, HMS, etc)
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.EMSLUsageType">
            <summary>
            EMSL usage type
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.EMSLProposalID">
            <summary>
            EUS user proposal ID
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.UserList">
            <summary>
            EUS user list
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.CartName">
            <summary>
            Name of cart used for sample run
            </summary>
            <remarks>This is an editable field even if the DMS Request has been resolved.</remarks>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.CartConfigName">
            <summary>
            Name of cart configuration for the current cart
            </summary>
            <remarks>This is an editable field even if the DMS Request has been resolved.</remarks>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.Comment">
            <summary>
            Comment field
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.MRMFileID">
            <summary>
            File ID for locating MRM file to download
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.Block">
            <summary>
            Block ID for blocking/randomizing
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.RunOrder">
            <summary>
            Run order for blocking/randomizing
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.DMSData.Batch">
            <summary>
            Batch number for blocking/randomizing
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.DMSData.LoadPropertyValues(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the class properties from a string dictionary
            </summary>
            <param name="propValues">String dictionary containing property names and values</param>
        </member>
        <member name="P:LcmsNetSDK.Data.IDMSValidator.DMSValidatorControl">
            <summary>
            The Type of a classDMSBaseControl derived control for DMS information for a single sample.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.IDMSValidator.IsSampleValid(LcmsNetSDK.Data.SampleData)">
            <summary>
             Determines if sample is valid for DMS
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="P:LcmsNetSDK.Data.IDMSValidatorMetaData.RelatedToolName">
            <summary>
            Gives the name of the DMS tool this validator is related to.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.IDMSValidatorMetaData.Version">
            <summary>
            Version of the Validator.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.IDMSValidatorMetaData.RequiredDMSToolVersion">
            <summary>
            The minimum version of the DMS tool that this validator works with.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.IDmsTools.ForceValidation">
            <summary>
            Determines if lcmsnet should attempt to force dmsvalidation, and refuse to queue samples if validator not found.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Data.IMethodWriter">
            <summary>
            A bridge between our DLL and our concrete classes for writing LC methods.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.IMethodWriter.CheckLocalMethodFolders">
            <summary>
            Test for presence of completed sample method folders that need to be moved to DMS
            </summary>
            <returns>TRUE if files found; FALSE otherwise</returns>
        </member>
        <member name="M:LcmsNetSDK.Data.IMethodWriter.MoveLocalMethodFiles">
            <summary>
            Moves local sample method files to the DMS transfer folder
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.IMethodWriter.CreateRemoteFolderPath">
            <summary>
            Creates the remote system path.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LcmsNetSDK.Data.InstrumentInfo">
             <summary>
             Class to hold data about the instrument connected to the LC cart
             </summary>
            
        </member>
        <member name="P:LcmsNetSDK.Data.InstrumentInfo.DMSName">
            <summary>
            Instrument name as used in DMS
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.InstrumentInfo.CommonName">
            <summary>
            User-friendly name used for pick lists
            </summary>
            <remarks>Instrument name, then a space, then the instrument description</remarks>
        </member>
        <member name="P:LcmsNetSDK.Data.InstrumentInfo.MethodName">
            <summary>
            Gets or sets the name of the method used to capture data from this instrument
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.InstrumentInfo.Status">
            <summary>
            Gets or sets the instrument status
            </summary>
            <remarks>Status will be active, inactive, or offline</remarks>
        </member>
        <member name="P:LcmsNetSDK.Data.InstrumentInfo.HostName">
            <summary>
            Gets or sets the name of the computer that holds the data for the instrument
            </summary>
            <remarks>May contain a domain suffix, for example VPro02.bionet</remarks>
        </member>
        <member name="P:LcmsNetSDK.Data.InstrumentInfo.SharePath">
            <summary>
            Gets or sets the name of the shared folder for retrieving the instrument data
            </summary>
            <remarks>Typically a single folder name, like ProteomicsData\ but might contain subfolders, e.g. UserData\Nikola\AMOLF\</remarks>
        </member>
        <member name="M:LcmsNetSDK.Data.InstrumentInfo.Clone">
            <summary>
            Clone - make a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Data.LcmsNetDataClassBase.GetPropertyValues">
            <summary>
            Gets current values for all the properties in the class in key/value format
            </summary>
            <returns>String dictionary containing current values of all properties</returns>
        </member>
        <member name="M:LcmsNetSDK.Data.LcmsNetDataClassBase.LoadPropertyValues(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the class properties from a string dictionary
            </summary>
            <param name="propValues">String dictionary containing property names and values</param>
        </member>
        <member name="T:LcmsNetSDK.Data.MRMFileData">
            <summary>
            Holds MRM file data downloaded from DMS
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.MRMFileData.FileName">
            <summary>
            Name of MRM file
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.MRMFileData.FileContents">
            <summary>
            Contents of MRM file
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.PalData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.PalData.Clone">
            <summary>
            Returns a new object reference to a cloned copy of this PAL data.
            </summary>
            <returns>A new object reference as a copy of this.</returns>
        </member>
        <member name="F:LcmsNetSDK.Data.PalData.CONST_DEFAULT_VIAL_NUMBER">
            <summary>
            Default sample vial number.  This should be invalid and force the user to update the sample information before running.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.PalData.CONST_MIN_WELLPLATE">
            <summary>
            Minimum wellplate number.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.PalData.CONST_MAX_WELLPLATE">
            <summary>
            Maximum wellplate number.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.PalData.palTray">
            <summary>
            Name of the PAL tray to use.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.PalData.well">
            <summary>
            Vial index to use.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.PalData.Well">
            <summary>
            Gets or sets the vial number to pull sample from.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.PalData.PALTray">
            <summary>
            Name of the PAL tray to use.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.PalData.Method">
            <summary>
            Name of the PAL method to run.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.PalData.WellPlate">
            <summary>
            The Wellplate name that is stored in DMS.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Data.SampleRunningStatus">
            <summary>
            Enumeration describing the status of a sample.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleRunningStatus.Queued">
            <summary>
            Queued but not told to execute.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleRunningStatus.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleRunningStatus.WaitingToRun">
            <summary>
            Waiting to run.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleRunningStatus.Running">
            <summary>
            Sample is currently running.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleRunningStatus.Complete">
            <summary>
            Sample successfully finished running.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleRunningStatus.Error">
            <summary>
            Error occurred during the run.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Data.SampleData">
            <summary>
            Class to hold data for one sample (more specifically, one instrument dataset)
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Data.SampleData.DelegateSamplePropertyChangedHandler">
            <summary>
            Delegate method definition to be called when a sample is modified.
            </summary>
            <param name="modifiedData">Modified sample.</param>
            <param name="propertyName">Name of the property that was changed.</param>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.CONST_MIN_SAMPLE_VOLUME">
            <summary>
            The minimum sample volume for this system.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.SampleData.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="isDummySample">If this is possibly a dummy or unchecked sample, and the real sample needs to be found in the queue/list</param>
        </member>
        <member name="M:LcmsNetSDK.Data.SampleData.Clone">
            <summary>
            Makes a deep copy of this object
            </summary>
            <returns>Deep copy of object</returns>
        </member>
        <member name="M:LcmsNetSDK.Data.SampleData.AddDateCartColumnToDatasetName(LcmsNetSDK.Data.SampleData)">
            <summary>
            Sets the dataset name
            </summary>
            <param name="sample"></param>
        </member>
        <member name="M:LcmsNetSDK.Data.SampleData.ResetDatasetNameToRequestName(LcmsNetSDK.Data.SampleData)">
            <summary>
            Resets the dataset name to the original request name.
            </summary>
            <param name="sample"></param>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_DmsData">
            <summary>
            DMS Data structure.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_sequenceNumber">
            <summary>
            Sequence order of the sample to run.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_palData">
            <summary>
            Pal Data reference.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_volume">
            <summary>
            Volume of sample to inject.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_columnData">
            <summary>
            Information regarding what column the sample is to be, or did run on.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_uniqueID">
            <summary>
            Unique ID for this sample not related to request name or sequence ID.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_method">
            <summary>
            LC Method that controls all of the hardware via the scheduling interface - UI consistent version.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_actualMethod">
            <summary>
            LC Method that controls all of the hardware via the scheduling interface.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_instrumentData">
            <summary>
            Instrument info.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_Operator">
            <summary>
            Operator performing LC run
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_RunningStatus">
            <summary>
            Status of the sample running on a column thread or waiting in a queue.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleData.m_IsDuplicateRequestName">
            <summary>
            If the sample's request name is a duplicate
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.IsDummySample">
            <summary>
            Whether this is possibly a dummy sample, and a real sample needs to be looked up before we perform any operations
            Default value is true; exists to prevent excessive lookups of the real sample.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.RunningStatus">
            <summary>
            Gets or sets the status of the sample running on a column thread or waiting in a queue.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.IsDuplicateRequestName">
            <summary>
            Gets or sets if the sample's request name is a duplicate
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.HasNotRun">
            <summary>
            True when changing the Running status manually is enabled
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.IsSetToRunOrHasRun">
            <summary>
            True when the sample has been set to run or has run
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.InstrumentData">
            <summary>
            Gets or sets the instrument object data.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.ActualLCMethod">
            <summary>
            Gets the experiment object data.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.LCMethod">
            <summary>
            Gets or sets the experiment setup object data.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.DmsData">
            <summary>
            Gets or sets the list of data downloaded from DMS for this sample
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.SequenceID">
            <summary>
            Gets or sets the sequence number that the sample is run in.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.PAL">
            <summary>
            Gets or sets the pal data associated with this sample.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.Volume">
            <summary>
            Gets or sets the volume of the sample to inject.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.ColumnData">
            <summary>
            Gets or sets the column data this sample is/was run on.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.SampleData.CloneLCMethod(LcmsNetSDK.Method.LCMethod)">
            <summary>
            Wipes out the current <see cref="P:LcmsNetSDK.Data.SampleData.ActualLCMethod"/>, and replaces it with a clone of the parameter (or a clone of <see cref="P:LcmsNetSDK.Data.SampleData.LCMethod"/>)
            </summary>
            <param name="methodToClone">Method to be cloned to <see cref="P:LcmsNetSDK.Data.SampleData.ActualLCMethod"/>; if null, <see cref="P:LcmsNetSDK.Data.SampleData.LCMethod"/> cloned.</param>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleData.UniqueID">
            <summary>
            Gets or sets the unique ID for a sample.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.SampleData.ResetSampleCompletedStatus(LcmsNetSDK.Data.SampleRunningStatus)">
            <summary>
            Reset the sample completion status by force, done by method to allow the property to prevent this accidentally occurring. This only has an effect if the current status is "Complete".
            </summary>
            <param name="desiredStatus"></param>
        </member>
        <member name="M:LcmsNetSDK.Data.SampleData.GetPropertyValues">
            <summary>
            Gets current values for all the properties in the class in key/value format
            </summary>
            <returns>String dictionary containing current values of all properties</returns>
        </member>
        <member name="T:LcmsNetSDK.Data.SampleQueryData">
            <summary>
            Class for holding data used to query DMS for samples to run
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Data.SampleQueryData.m_QueryParams">
            <summary>
            Dictionary of filters to apply when finding requested runs
            </summary>
            <remarks>Keys are RequestName, MinRequestNum, MaxRequestNum, BatchID, Block, Cart, or Wellplate</remarks>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleQueryData.RequestName">
            <summary>
            Requested run name
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleQueryData.MinRequestNum">
            <summary>
            Minimum request ID (integer)
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleQueryData.MaxRequestNum">
            <summary>
            Maximum request ID (integer)
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleQueryData.BatchID">
            <summary>
            Batch ID to use
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleQueryData.Block">
            <summary>
            Block to use
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.SampleQueryData.Cart">
            <summary>
            Cart name (supports partial match)
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.SampleQueryData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.SampleQueryData.AddQueryFilter(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            If a specified filter is defined, append the appropriate SQL to the query builder
            </summary>
            <param name="queryBldr"></param>
            <param name="sqlFilter"></param>
            <param name="filterName"></param>
        </member>
        <member name="M:LcmsNetSDK.Data.SampleQueryData.GetValueIfFound(System.String)">
            <summary>
            Tests for existence of spcified key in dictionary
            </summary>
            <param name="dictKey">Key name</param>
            <returns>Key value if found, otherwise empty string</returns>
        </member>
        <member name="M:LcmsNetSDK.Data.SampleQueryData.BuildSqlString">
            <summary>
            Build the query string for retrieving data from V_Scheduled_Run_Export
            </summary>
            <returns></returns>
        </member>
        <member name="T:LcmsNetSDK.Data.TriggerFileTools">
            <summary>
            Tools for generation of trigger files
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Data.TriggerFileTools.GenerateTriggerFile(LcmsNetSDK.Data.SampleData)">
            <summary>
            Generates a trigger file for a sample
            </summary>
            <param name="sample"></param>
        </member>
        <member name="M:LcmsNetSDK.Data.TriggerFileTools.GenerateXmlDoc(LcmsNetSDK.Data.SampleData)">
            <summary>
            Generates the XML-formatted trigger file contents
            </summary>
            <param name="sample">sample object for sample that was run</param>
        </member>
        <member name="M:LcmsNetSDK.Data.TriggerFileTools.ConvertTimeLocalToUtc(System.DateTime)">
            <summary>
            Converts a string representing a local time to UTC time
            </summary>
            <param name="localTime">Local time</param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Data.TriggerFileTools.AddParam(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Adds a trigger file parameter to the XML document defining the file contents
            </summary>
            <param name="Parent">Parent element to add the parameter to</param>
            <param name="paramName">Name of the parameter to add</param>
            <param name="paramValue">Value of the parameter</param>
        </member>
        <member name="M:LcmsNetSDK.Data.TriggerFileTools.SaveFile(System.Xml.XmlDocument,LcmsNetSDK.Data.SampleData,System.String)">
            <summary>
            Write the trigger file
            </summary>
            <param name="doc">XML document to be written</param>
            <param name="sample">Name of the sample this trigger file is for</param>
            <param name="datasetName">Dataset name</param>
        </member>
        <member name="M:LcmsNetSDK.Data.TriggerFileTools.CheckLocalTriggerFiles">
            <summary>
            Tests for presence of local trigger files
            </summary>
            <returns>TRUE if trigger files present, FALSE otherwise</returns>
        </member>
        <member name="M:LcmsNetSDK.Data.TriggerFileTools.MoveLocalTriggerFiles">
            <summary>
            Moves local trigger files to a remote server
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Data.UserInfo">
            <summary>
            Class to hold data about LcmsNet users
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.UserInfo.UserName">
            <summary>
            Name of user
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Data.UserInfo.PayrollNum">
            <summary>
            Payroll number (network login) of user
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.BaseDeviceControlViewModel.device">
            <summary>
            The associated device.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.BaseDeviceControlViewModel.SetBaseDevice(LcmsNetSDK.Devices.IDevice)">
            <summary>
            Sets the base device and updates the name text field.
            </summary>
            <param name="device"></param>
        </member>
        <member name="E:LcmsNetSDK.Devices.BaseDeviceControlViewModel.NameChanged">
            <summary>
            An event that indicates the name has changed.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.BaseDeviceControlViewModel.SaveRequired">
            <summary>
            An event that indicates the control needs to be saved
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.BaseDeviceControlViewModel.Running">
            <summary>
            Indicates whether the device is currently running or not.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.BaseDeviceControlViewModel.Name">
            <summary>
            Gets or sets the name of the control
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.BaseDeviceControlViewModel.DeviceStatus">
            <summary>
            Status of device, updated using UpdateStatusDisplay
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DeviceConfiguration">
            <summary>
            Holds the configuration of a collection of devices for persistence.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceConfiguration.m_settings">
            <summary>
            Maps devices to their settings.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceConfiguration.m_connections">
            <summary>
            holds a list of connections and the ports that they connection
            unique ID of connection is the key, the ports are a comma separated string that make up the value
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceConfiguration.m_devices">
            <summary>
            Holds a list of devices that can be enumerated through.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceConfiguration.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceConfiguration.CartName">
            <summary>
            Cart name
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceConfiguration.DeviceCount">
            <summary>
            Gets the number of devices stored here.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceConfiguration.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">Index of IDevice.</param>
            <returns>Device in collection at index.</returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceConfiguration.AddSetting(System.String,System.String,System.Object)">
            <summary>
            Adds a setting for the given device.
            </summary>
            <param name="deviceName">Device to persist.  If not added before will be saved</param>
            <param name="settingsName">Name of setting.</param>
            <param name="value">Value to assign.</param>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceConfiguration.GetDeviceSettings(System.String)">
            <summary>
            Retrieves the device settings for the specified device.
            </summary>
            <param name="deviceName"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceControlAttribute.#ctor(System.Type,System.Type,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="deviceControlType"></param>
            <param name="fluidicsDeviceType"></param>
            <param name="name"></param>
            <param name="category"></param>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceControlAttribute.Category">
            <summary>
            Gets or sets the category name of the device.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceControlAttribute.Name">
            <summary>
            Gets or sets the device name
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceControlAttribute.FluidicsDeviceType">
            <summary>
            Gets or sets the fluidics device type to be constructed for custom fluidics devices.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceControlAttribute.ControlType">
            <summary>
            Gets or sets the advanced user control for displaying from system dashboard or the Fluidics Device
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DeviceErrorEventArgs">
            <summary>
            Event argument class when a device has an error.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceErrorEventArgs.CONST_NO_NOTIFIER">
            <summary>
            String indicating that there is no notification required.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceErrorEventArgs.#ctor(System.String,System.Exception,LcmsNetSDK.Devices.DeviceErrorStatus,LcmsNetSDK.Devices.IDevice,System.String,LcmsNetSDK.Devices.DeviceEventLoggingType)">
            <summary>
            Default constructor.
            </summary>
            <param name="errorMessage"></param>
            <param name="ex"></param>
            <param name="status"></param>
            <param name="device"></param>
            <param name="notifyStr"></param>
            <param name="loggingType"></param>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceErrorEventArgs.Error">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceErrorEventArgs.Exception">
            <summary>
            Gets or sets the Exception (if any involved).
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceErrorEventArgs.ErrorStatus">
            <summary>
            Error status of the device.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceErrorEventArgs.Device">
            <summary>
            Device
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceErrorEventArgs.Notification">
            <summary>
            Notification string
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceErrorEventArgs.LoggingType">
            <summary>
            How the event should be logged
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DeviceErrorStatus">
            <summary>
            Enumeration describing errors that can occur on the carts.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceErrorStatus.NoError">
            <summary>
            No error occurs
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceErrorStatus.ErrorSampleOnly">
            <summary>
            There was an error but it only affects this sample.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceErrorStatus.ErrorAffectsAllColumns">
            <summary>
            There was an error and it affects all samples on all columns.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceErrorStatus.ErrorAffectsThisColumn">
            <summary>
            There was an error and it affects only this column.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DeviceEventLoggingType">
            <summary>
            Enum to specify how a status or error event should be logged
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceEventLoggingType.None">
            <summary>
            Do not log the event
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceEventLoggingType.Default">
            <summary>
            Log the event to the default log for the event type
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceEventLoggingType.Message">
            <summary>
            Log the event to the message log
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceEventLoggingType.Error">
            <summary>
            Log the event to the error log
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DeviceManager">
            <summary>
            Device manager class for maintaining a list of all devices used by the application.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceManager.Manager">
            <summary>
            Gets or sets the static device manager reference.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceManager.m_devices">
            <summary>
            A current list of devices the application is using.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceManager.m_deviceManager">
            <summary>
            Static Device Manager Reference.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.DeviceManager.DeviceAdded">
            <summary>
            Fired when a device is successfully added.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.DeviceManager.DeviceRemoved">
            <summary>
            Fired when a device is successfully removed.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.DeviceManager.DeviceRenamed">
            <summary>
            Fired when a device has been renamed.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceManager.CONST_PUMP_METHOD_PATH">
            <summary>
            Defines where pump methods are to be stored.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceManager.CONST_DEVICE_PLUGIN_PATH">
            <summary>
            Path to the device plug-ins.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceManager.CONST_DEVICE_NAME_TAG">
            <summary>
            Tag for the configuration file.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceManager.CONST_DEVICE_TYPE_TAG">
            <summary>
            Tag for the configuration file.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceManager.CONST_DEVICE_TYPE_PATH">
            <summary>
            Tag for the configuration file.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.DeviceManager.InitialzingDevice">
            <summary>
            Fired when status changes for the device manager.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.DeviceManager.PluginsLoaded">
            <summary>
            Fired when new plugins are loaded.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.DeviceManager.DevicesInitialized">
            <summary>
            Fired when all devices are initialized.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceManager.m_plugins">
            <summary>
            A list of loaded plugin assemblies.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceManager.m_loadingPlugins">
            <summary>
            Flag to indicate whether plug-ins are already being loaded via a directory operation.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceManager.m_emulateDevices">
            <summary>
            Flag tracking whether the devices are emulated or not.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.#ctor">
            <summary>
            Default constructor.  Sets the static device manager object reference to this.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Found the assembly that was required.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceManager.Devices">
            <summary>
            Gets the list of registered devices.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceManager.AvailablePlugins">
            <summary>
            Gets the list of available plug-ins.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceManager.Emulate">
            <summary>
            Gets or sets whether to emulate the devices or not.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceManager.DeviceCount">
            <summary>
            Gets the device count.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceManager.InitializedDeviceCount">
            <summary>
            Gets the number of initialized devices.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.LoadPersistentConfiguration(LcmsNetSDK.Devices.DeviceConfiguration)">
            <summary>
            Loads a device
            </summary>
            <param name="configuration">Configuration</param>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.ExtractToPersistConfiguration(LcmsNetSDK.Devices.DeviceConfiguration@)">
            <summary>
            Saves all devices to the configuration
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.GetExecutingAssemblyFolderPath">
            <summary>
            Return the path to the directory with the DLL running this code
            </summary>
            <returns>Directory path, or an empty string if the path cannot be determined</returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.DeviceNameExists(System.String)">
            <summary>
            Searches the device manager for a device with the same name.
            </summary>
            <param name="deviceName">Name to search the device manager for.</param>
            <returns>True if device name is in use.  False if the device name is free</returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.FindDevice(System.String,System.Type)">
            <summary>
            Finds the devices that are named with the supplied name and type.
            </summary>
            <param name="deviceName">Name of the device of question.</param>
            <param name="deviceType">Type of the device of question.</param>
            <returns>IDevice object reference if it exists, null if it does not.</returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.FindDevice(System.String)">
            <summary>
            Finds a device just by name.
            </summary>
            <param name="deviceName"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.CreateUniqueDeviceName(System.String)">
            <summary>
            Creates a unique device name from the basename provided.
            </summary>
            <param name="baseName"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.RenameDevice(LcmsNetSDK.Devices.IDevice,System.String)">
            <summary>
            Renames the device with the given basename after checking to see if that name is reserved.
            </summary>
            <param name="device">Device to rename</param>
            <param name="basename">Name to use for the device.</param>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.AddDevice(LcmsNetSDK.Devices.IDevice)">
            <summary>
            Adds the device to the device manager if the name is not a duplicate and the same object reference does not exist.
            </summary>
            <returns>True if the device was added.  False if device was not added.</returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.AddDevice(LcmsNetSDK.Devices.DevicePluginInformation,System.Boolean)">
            <summary>
            Creates a new device based on the plug-in information.
            </summary>
            <param name="plugin">Device plug-in used to create a new device.</param>
            <param name="initialize">Indicates whether to initialize the device if added succesfully </param>
            <returns>True if successful, False if it fails.</returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.RemoveDevice(LcmsNetSDK.Devices.IDevice)">
            <summary>
            Removes the device from the device manager.
            </summary>
            <param name="device">Device to remove.</param>
            <returns>True if device was removed successfully.  False if the device could not be removed at that time.</returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.SetEmulationFlags">
            <summary>
            Updates devices with emulated flags
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.ShutdownDevices">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.ShutdownDevices(System.Boolean)">
            <summary>
            Calls the shutdown method for each device.
            </summary>
            <returns>True if shutdown successful.  False if shutdown failed.</returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.InitializeDevice(LcmsNetSDK.Devices.IDevice)">
            <summary>
            Initializes the device.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.InitializeDevices(System.Boolean)">
            <summary>
            Initializes all the devices if they have not been initialized already.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.InitializeDevices">
            <summary>
            Initializes all the devices if they have not been initialized already.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.LoadSatelliteAssemblies(System.String)">
            <summary>
            Loads the satellite assemblies required for type checking.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.LoadPlugins(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Loads supported device plugin types.
            </summary>
            <param name="assembly">Assembly to load device types from.</param>
            <param name="forceReload">Flag indicating whether to force a re-load the assemblies if they have already been loaded.</param>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.LoadPlugins(System.String,System.Boolean)">
            <summary>
            Retrieves plug-ins from the assembly at the path provided.
            </summary>
            <param name="assemblyPath">File path to assembly.</param>
            <param name="forceReload">Flag indicating whether to force a re-load the assemblies if they have already been loaded.</param>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.LoadPlugins(System.String,System.String,System.Boolean)">
            <summary>
            Loads supported device plugin types from a directory.
            </summary>
            <param name="directoryPath">Directory of assemblies to load.</param>
            <param name="filter">Assembly file filter.</param>
            <param name="forceReload">Flag indicating whether to force a re-load the assemblies if they have already been loaded.</param>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.RetrieveSupportedDevicePluginTypes(System.Reflection.Assembly)">
            <summary>
            Loads supported device plugin types.
            </summary>
            <param name="assembly">Assembly to load device types from.</param>
            <returns>All types that support IDevice and have been attributed with a glyph and device control attribute.</returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManager.RetrieveSupportedDevicePluginTypes(System.String)">
            <summary>
            Retrieves plug-ins from the assembly at the path provided.
            </summary>
            <param name="assemblyPath">File path to assembly.</param>
            <returns>All types that support IDevice and have been attributed with a glyph and device control attribute.</returns>
        </member>
        <member name="T:LcmsNetSDK.Devices.DeviceInitializationException">
             <summary>
            
             </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DeviceManagerStatusArgs">
            <summary>
            Arguments for manager status arguments.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceManagerStatusArgs.Message">
            <summary>
            Gets the status message.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DevicePluginInformation">
            <summary>
            Encapsulates a device type and other extracted properties.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.DevicePluginInformation.#ctor(System.Type,LcmsNetSDK.Devices.DeviceControlAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="deviceType"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:LcmsNetSDK.Devices.DevicePluginInformation.ToString">
            <summary>
            Returns the name of the device.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LcmsNetSDK.Devices.DevicePluginInformation.DeviceType">
            <summary>
            Gets or sets the device type.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DevicePluginInformation.DeviceAttribute">
            <summary>
            Gets or sets the attribute of the device.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DeviceStatus">
            <summary>
            Enumeration of possible status.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceStatusEventArgs.#ctor(LcmsNetSDK.Devices.DeviceStatus,System.String,LcmsNetSDK.System.INotifier,System.String,LcmsNetSDK.Devices.DeviceEventLoggingType)">
            <summary>
            Default Constructor
            </summary>
            <param name="status"></param>
            <param name="notification"></param>
            <param name="notifier"></param>
            <param name="message"></param>
            <param name="loggingType"></param>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceStatusEventArgs.Status">
            <summary>
            Gets the device status.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceStatusEventArgs.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceStatusEventArgs.Notification">
            <summary>
            Notification string
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.DeviceStatusEventArgs.LoggingType">
            <summary>
            How the event should be logged
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DeviceType">
            <summary>
            Enumeration of the type of device.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceType.Component">
            <summary>
            Component is one created by the user.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceType.BuiltIn">
            <summary>
            A system type is one that is built-into the application.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceType.Virtual">
            <summary>
            Virtual devices can be instantiated multiple times.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.DeviceType.Fluidics">
            <summary>
            Virtual device that has no effect on the system but is not virtual
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DelegatePositionChanged">
            <summary>
            Defines calling structure for when a valves position has changed.
            </summary>
            <param name="sender"></param>
            <param name="newPosition"></param>
        </member>
        <member name="T:LcmsNetSDK.Devices.DelegateDeviceStatusUpdate">
            <summary>
            Delegate defining the status of a device.
            </summary>
            <param name="sender">Device called.</param>
            <param name="status">Status of device</param>
        </member>
        <member name="T:LcmsNetSDK.Devices.IAutoSampler">
            <summary>
            Base interface for autosamplers
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.IAutoSampler.TrayNamesRead">
            <summary>
            Fired when new trays are available.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.IAutoSampler.MethodNamesRead">
            <summary>
            Fired when new methods are available.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IAutoSampler.TrayNames">
            <summary>
            List of tray names in the autosampler
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IAutoSampler.MethodNames">
            <summary>
            List of methods in the autosampler
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IAutoSampler.TrayNamesAndMaxVials">
            <summary>
            The max vial number for each tray in the autosampler (according to autosampler configuration). Does not imply actual presence of a tray or vial.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IAutoSampler.Emulation">
            <summary>
            If the device is emulated
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.AutoSampleEventArgs">
            <summary>
            Event args passed when IAutoSampler events are fired
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.IDevice.DeviceSaveRequired">
            <summary>
            Fired when a property changes in the device.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.IDevice.Initialize(System.String@)">
            <summary>
            Calls an initialization sequence for the device to perform after construction.
            </summary>
            <returns>True if initialization successful.  False if initialization failed.</returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.IDevice.Shutdown">
            <summary>
            Calls a shutdown sequence for the device to stop all acquiring/control.
            </summary>
            <returns>True if shutdown successful.  False if failure occured.</returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.IDevice.RegisterDataProvider(System.String,LcmsNetSDK.Devices.DelegateDeviceHasData)">
            <summary>
            Register controls that are being disposed for a given data provider.
            </summary>
            <param name="key">Data provider name</param>
            <param name="remoteMethod">Delegate method to call from the device to synch events to.</param>
        </member>
        <member name="M:LcmsNetSDK.Devices.IDevice.UnRegisterDataProvider(System.String,LcmsNetSDK.Devices.DelegateDeviceHasData)">
            <summary>
            De-register controls that are being disposed for a given data provider.
            </summary>
            <param name="key">Data provider name</param>
            <param name="remoteMethod">Delegate method to call from the device to synch events to.</param>
        </member>
        <member name="M:LcmsNetSDK.Devices.IDevice.WritePerformanceData(System.String,System.String,System.Object[])">
            <summary>
            Write the performance data and other required information associated with this device after a run.
            </summary>
            <param name="directoryPath">Path to write data to.</param>
            <param name="methodName">Name of method to gather performance data about.</param>
            <param name="parameters">Parameter data to use when writing output.</param>
        </member>
        <member name="P:LcmsNetSDK.Devices.IDevice.Version">
            <summary>
            Gets the version name of the hardware if applicable.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IDevice.Status">
            <summary>
            Gets or sets the status of the device.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IDevice.AbortEvent">
            <summary>
            Gets or sets the abort event for scheduling.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IDevice.ErrorType">
            <summary>
            Gets the error type for a given device.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IDevice.DeviceType">
            <summary>
            Gets the device type.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IDevice.Emulation">
            <summary>
            Gets or sets whether the device is emulation mode or not.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.IDeviceControl">
            <summary>
            Describes the interface for user control's that interface a given hardware device or object.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IDeviceControl.Running">
            <summary>
            Indicates control state
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IDeviceControl.Device">
            <summary>
            Gets the device to be controlled that's associated with this interface
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IDeviceControl.Name">
            <summary>
            Gets or sets the name of the device control.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DelegateDeviceUpdated">
            <summary>
            Delegate definition when a device is added or removed.
            </summary>
            <param name="sender">Object who added the device.</param>
            <param name="device">Device that was added</param>
        </member>
        <member name="T:LcmsNetSDK.Devices.IDeviceManager">
            <summary>
            Interface describing a device manager.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.DeviceManagerBridge">
            <summary>
            Class for bridging the device manager to the user defined controls
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.DeviceManagerBridge.RenameDevice(LcmsNetSDK.Devices.IDevice,System.String)">
            <summary>
            Renames the device to the name supplied.
            </summary>
            <param name="device"></param>
            <param name="basename"></param>
        </member>
        <member name="T:LcmsNetSDK.Devices.INetworkStart">
            <summary>
            Interface for a network start.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.INetworkStart.MethodNames">
            <summary>
            Fired when new method names are available.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.IPump">
            <summary>
            Interface for displaying pump data
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IPump.Name">
            <summary>
            Name of the device.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.IPump.MobilePhases">
            <summary>
            Gets or sets the list of mobile phases associated with the pump.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.IPump.MonitoringDataReceived">
            <summary>
            Event fired when new pump data is available.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.IPump.DeviceSaveRequired">
            <summary>
            Event fired when a pump setting has changed and needs to be saved.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.MonitoringComponent">
            <summary>
            Class that encapsulates all trackable diagnostic data for the cart.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.MonitoringComponent.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringComponent.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringComponent.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringComponent.Name">
            <summary>
            Gets or sets the name of the component.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringComponent.Model">
            <summary>
            Gets or sets the model of the component.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringComponent.Type">
            <summary>
            Gets or sets the type of the device.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringComponent.Description">
            <summary>
            Gets or sets the description of the device.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringComponent.MeasurementData">
            <summary>
            Gets or sets the list of diagnostic data.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringComponent.PlotData">
            <summary>
            Represents plot data.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringMeasurementScalar.Units">
            <summary>
            Gets or sets the unit type.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringMeasurementScalar.Value">
            <summary>
            Gets or sets the value of the measurement.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.MonitoringMeasurementPlot">
            <summary>
            Represents a collection of data.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.MonitoringMeasurementPlot.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringMeasurementPlot.XUnits">
            <summary>
            Gets or sets the X-unit type.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringMeasurementPlot.YUnits">
            <summary>
            Gets or sets the Y-unit type.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringMeasurementPlot.XValues">
            <summary>
            Gets or sets a list of x-values.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringMeasurementPlot.YValues">
            <summary>
            Gets or sets a list of y-values.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.MonitoringMeasurement">
            <summary>
            Represents the base of measurement data.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringMeasurement.Type">
            <summary>
            Gets or sets the data type.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringMeasurement.Name">
            <summary>
            Gets or sets the name of measurement.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.MonitoringMeasurement.Description">
            <summary>
            Gets or sets the description of the measurement.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.PersistenceDataAttribute">
            <summary>
            Attribute used to save a device's settings
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.PersistenceDataAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="settingName"></param>
        </member>
        <member name="P:LcmsNetSDK.Devices.PersistenceDataAttribute.SettingName">
            <summary>
            Gets the name of the setting.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.PumpDataEventArgs">
            <summary>
            Class for event handler arguments.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Devices.TimerDevice">
            <summary>
            Class that handles low level timing.  Has one method to wait!
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.TimerDevice.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.TimerDevice.StatusUpdate">
            <summary>
            Fired when the status changes.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Devices.TimerDevice.Error">
            <summary>
            Fired when an error occurs in the device.
            </summary>
            <remarks>This event is required by IDevice but this class does not use it</remarks>
        </member>
        <member name="E:LcmsNetSDK.Devices.TimerDevice.DeviceSaveRequired">
            <summary>
            Fired when a property changes in the device.
            </summary>
            <remarks>This event is required by IDevice but this class does not use it</remarks>
        </member>
        <member name="P:LcmsNetSDK.Devices.TimerDevice.AbortEvent">
            <summary>
            Gets or sets the abort event for scheduling.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.TimerDevice.ToString">
            <summary>
            Returns the name of the device.
            </summary>
            <returns></returns>
        </member>
        <member name="F:LcmsNetSDK.Devices.TimerDevice.m_name">
            <summary>
            Name of the device.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Devices.TimerDevice.m_status">
            <summary>
            Status of the device currently.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.TimerDevice.WaitSeconds(System.Double)">
            <summary>
            Waits for N milliseconds.
            </summary>
            <param name="seconds">Total number of milliseconds to wait.</param>
        </member>
        <member name="M:LcmsNetSDK.Devices.TimerDevice.WaitMilliseconds(System.Int32,System.Threading.ManualResetEvent)">
            <summary>
            Waits for N milliseconds blocking.
            </summary>
            <param name="milliSeconds">Total number of milliseconds to wait.</param>
            <param name="resetEvent">Event to wait on</param>
        </member>
        <member name="P:LcmsNetSDK.Devices.TimerDevice.Emulation">
            <summary>
            Gets or sets whether the device is emulated or not.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.TimerDevice.Name">
            <summary>
            Gets or sets the name of the device.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Devices.TimerDevice.Version">
            <summary>
            Version of the timer.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Devices.TimerDevice.Initialize(System.String@)">
            <summary>
            Initializes the device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Devices.TimerDevice.Shutdown">
            <summary>
            Shuts off the timer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LcmsNetSDK.Devices.TimerDevice.Status">
            <summary>
            Status of the device
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Experiment.LCExperimentData">
            <summary>
            Experiment data
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Experiment.LCExperimentData.ExperimentName">
            <summary>
            Gets or sets the name of the experiment method to run.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Experiment.SampleValidResult">
            <summary>
            Sample Validation Result
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Experiment.SampleValidationError">
            <summary>
            Holds information regarding the type of error that
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Experiment.SampleValidationErrorType">
            <summary>
            Enumeration detailing how severe the validation error is.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Experiment.SampleValidationErrorType.DatasetNameError">
            <summary>
            The dataset name is erroneous.  E.g. (Unused)
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Experiment.SampleValidationErrorType.DeviceDoesNotExist">
            <summary>
            The device does not exist in configuration.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Experiment.SampleValidationErrorType.DeviceInError">
            <summary>
            A device was in error.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Experiment.SampleValidationErrorType.InjectionVolumeOutOfRange">
            <summary>
            The injection volume was out of range.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Experiment.SampleValidationErrorType.LCMethodNotSelected">
            <summary>
            The LC Method was not selected.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Experiment.SampleValidationErrorType.LCMethodHasNoEvents">
            <summary>
            The LC Method has no events defined.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Experiment.SampleValidationErrorType.LCMethodIncorrect">
            <summary>
            The LC Method was not built correctly.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Experiment.SampleValidationErrorType.PalMethodNotSpecified">
            <summary>
            The PAL Method was not specified.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Experiment.SampleValidationErrorType.PalTrayNotSpecified">
            <summary>
            The PAL Tray was not specified.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Experiment.SampleValidationErrorType.PalVialNotSpecified">
            <summary>
            The PAL well or vial was not specified.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Logging.ThreadPoolStateObject.MessageLevel">
            <summary>
            Message importance level (0 is most important, 5 is least important)
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Logging.ApplicationLogger">
            <summary>
            Class that marshalls messages from different components to different logging and streaming capabilities.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Logging.ApplicationLogger.DelegateErrorHandler">
            <summary>
            Delegate method handler defining how an error event will be called.
            </summary>
            <param name="errorLevel"></param>
            <param name="args"></param>
        </member>
        <member name="T:LcmsNetSDK.Logging.ApplicationLogger.DelegateMessageHandler">
            <summary>
            Delegate method handler defining how a message event will be called.
            </summary>
            <param name="messageLevel"></param>
            <param name="args"></param>
        </member>
        <member name="F:LcmsNetSDK.Logging.ApplicationLogger.CONST_STATUS_LEVEL_CRITICAL">
            <summary>
            Critical and should always be logged.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Logging.ApplicationLogger.CONST_STATUS_LEVEL_DETAILED">
            <summary>
            More detailed error levels.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Logging.ApplicationLogger.CONST_STATUS_LEVEL_USER">
            <summary>
            Less likely to need to be logged.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Logging.ApplicationLogger.m_errorLevel">
            <summary>
            Error message importance level (0 is most important, 5 is least important)
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Logging.ApplicationLogger.m_messageLevel">
            <summary>
            Status message importance level (0 is most important, 5 is least important)
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Logging.ApplicationLogger.ErrorLevel">
            <summary>
            Gets or sets the error level to log.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Logging.ApplicationLogger.MessageLevel">
            <summary>
            Gets or sets the message level to log (0 is most important, 5 is least important)
            </summary>
            <remarks>
            When MessageLevel is 0, only critical errors are logged
            When MessageLevel is 5, all messages are logged
            </remarks>
        </member>
        <member name="E:LcmsNetSDK.Logging.ApplicationLogger.Message">
            <summary>
            Found when the application finds a message.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Logging.ApplicationLogger.Error">
            <summary>
            Fired when the application has an error.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Logging.ApplicationLogger.LogError(System.Int32,System.String)">
            <summary>
            Logs an error to the listening error output streams.
            </summary>
            <param name="errorLevel">Level of the error message so more verbose errors can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Error message</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ApplicationLogger.LogError(System.Int32,System.String,System.Exception)">
            <summary>
            Logs an error to the listening error output streams.
            </summary>
            <param name="errorLevel">Level of the error message so more verbose errors can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Error message</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ApplicationLogger.LogError(System.Int32,System.String,System.Exception,LcmsNetSDK.Data.SampleData)">
            <summary>
            Logs an error to the listening error output streams
            </summary>
            <param name="errorLevel">Level of the error message so more verbose errors can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Error message</param>
            <param name="ex">Exception</param>
            <param name="sample">Data for a sample</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ApplicationLogger.LogMessage(System.Int32,System.String)">
            <summary>
            Logs a message to the listening message output streams.
            </summary>
            <param name="messageLevel">Level of the message so more verbose messages can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Message to log</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ApplicationLogger.LogMessage(System.Int32,System.String,LcmsNetSDK.Data.SampleData)">
            <summary>
            Logs a message to the listening message output streams.
            </summary>
            <param name="messageLevel">Level of the message so more verbose messages can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Message to log</param>
            <param name="sample">Sample data</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ApplicationLogger.RaiseErrorEvent(System.Object)">
            <summary>
            Raises the error event in a Threadpool thread to avoid interrupting other functions with I/O.
            </summary>
            <param name="errorInfo"></param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ApplicationLogger.RaiseMessageEvent(System.Object)">
            <summary>
            Raises the message event in a Threadpool thread to avoid interrupting other functions with I/O.
            </summary>
            <param name="messageInfo"></param>
        </member>
        <member name="T:LcmsNetSDK.Logging.DbLogger">
            <summary>
            Logs errors and messages to a SQLite database
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Logging.DbLogger.LogError(System.Int32,LcmsNetSDK.Logging.ErrorLoggerArgs)">
            <summary>
            Logs an error
            </summary>
            <param name="errorLevel">Error level</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.DbLogger.LogMessage(System.Int32,LcmsNetSDK.Logging.MessageLoggerArgs)">
            <summary>
            Logs a message
            </summary>
            <param name="msgLevel">Message level</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.DbLogger.WriteLogMsgToDb(System.String,System.String)">
            <summary>
            Writes a SQL INSERT command to the log db file
            </summary>
            <param name="sqlCmd">SQL command string</param>
            <param name="connStr">Connection string</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.DbLogger.InitLogDatabase">
            <summary>
            Creates logging database file and initializes it
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Logging.DbLogger.CreateDbFile">
            <summary>
            Creates and initializes a SQLite DB file for logging, and sets up the connection string
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Logging.DbLogger.CreateLogTable(System.String)">
            <summary>
            Creates the table for holding log entries
            </summary>
            <param name="connStr">DB connection string</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.DbLogger.ExecuteSQLiteCommand(System.String,System.String)">
            <summary>
            Executes specified SQLite command
            </summary>
            <param name="cmdStr">SQL statement to execute</param>
            <param name="connStr">Connection string for SQL database file</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.DbLogger.VerifyTableExists(System.String,System.String)">
            <summary>
            Determines if a particular table exists in the SQLite database
            </summary>
            <param name="tableName">Name of the table to search for</param>
            <param name="connStr">Connection string for database</param>
            <returns>TRUE if table found; FALSE if not found or error</returns>
        </member>
        <member name="M:LcmsNetSDK.Logging.DbLogger.GetSQLiteDataTable(System.String,System.String)">
            <summary>
            Retrieves a data table from a SQLite database
            </summary>
            <param name="cmdStr">SQL command to execute</param>
            <param name="connStr">Connection string for SQLite database file</param>
            <returns>A DataTable containing data specfied by <paramref name="cmdStr"/></returns>
        </member>
        <member name="M:LcmsNetSDK.Logging.DbLogger.UnwrapExceptionMsgs(System.Exception,System.String@)">
            <summary>
            Peels nested exceptions to get to the innermost error message
            </summary>
            <param name="ex">Input exception</param>
            <param name="msg">Input/Output message</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.DbLogger.ReplaceQuotes(System.String)">
            <summary>
            Escapes single quotes in a string being stored in db
            </summary>
            <param name="inpStr">String to be tested</param>
            <returns>Escaped string</returns>
        </member>
        <member name="T:LcmsNetSDK.Logging.DbLoggerException">
            <summary>
            Custom exception for database logging problems
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Logging.ErrorLoggerArgs">
            <summary>
            Class that encapsulates an error found by a component.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Logging.ErrorLoggerArgs.#ctor(System.String)">
            <summary>
            Constructor that takes the error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ErrorLoggerArgs.#ctor(System.String,LcmsNetSDK.Data.SampleData)">
            <summary>
            Constructor that takes the error message.
            </summary>
            <param name="message">Error message</param>
            <param name="sample"></param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ErrorLoggerArgs.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that takes an error message and an exception.
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Exception found</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ErrorLoggerArgs.#ctor(System.String,System.Exception,LcmsNetSDK.Data.SampleData)">
            <summary>
            Constructor that takes an error message and an exception.
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Exception found</param>
            <param name="sample"></param>
        </member>
        <member name="P:LcmsNetSDK.Logging.ErrorLoggerArgs.Exception">
            <summary>
            Gets or sets the exception associated with the error message if any.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Logging.FileLogging">
            <summary>
            Logs errors and messages to a file
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Logging.FileLogging.m_logFileCreated">
            <summary>
            Flag indicating whether a log file has been created for this program start.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Logging.FileLogging.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Logging.FileLogging.DelegateLogPathReporter">
            <summary>
            Delegate method handler defining how an error event will be called.
            </summary>
            <param name="args"></param>
        </member>
        <member name="E:LcmsNetSDK.Logging.FileLogging.LogFilePathDefined">
            <summary>
            Fired when the log file path is defined
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Logging.FileLogging.LogPath">
            <summary>
            Gets the file log path.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Logging.FileLogging.AppFolder">
            <summary>
            Gets the file log path.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Logging.FileLogging.GetExceptionMessage(System.Exception,System.String@)">
            <summary>
            Unwraps nested exception messages
            </summary>
            <param name="ex">Input exception</param>
            <param name="msg">Message(s) contained in exception</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.FileLogging.WriteToLogFile(System.String)">
            <summary>
            Writes a string to the log file
            </summary>
            <param name="msgStr">String to write</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.FileLogging.CreateLogFilePath">
            <summary>
            Creates a log file name
            </summary>
            <returns>Name and path of error log file</returns>
        </member>
        <member name="T:LcmsNetSDK.Logging.IDeviceHealthWriter">
            <summary>
            Writes data to a stream for health monitoring reasons.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Logging.ILogger.LogError(System.Int32,System.String,System.Exception,LcmsNetSDK.Data.SampleData)">
            <summary>
            Logs an error to the listening error output streams
            </summary>
            <param name="errorLevel">Level of the error message so more verbose errors can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Error message</param>
            <param name="ex">Exception</param>
            <param name="sample">Data for a sample</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ILogger.LogError(System.Int32,System.String,System.Exception)">
            <summary>
            Logs an error to the listening error output streams
            </summary>
            <param name="errorLevel">Level of the error message so more verbose errors can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Error message</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ILogger.LogError(System.Int32,System.String,LcmsNetSDK.Data.SampleData)">
            <summary>
            Logs an error to the listening error output streams
            </summary>
            <param name="errorLevel">Level of the error message so more verbose errors can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Error message</param>
            <param name="sample">Data for a sample</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ILogger.LogError(System.Int32,System.String)">
            <summary>
            Logs an error to the listening error output streams
            </summary>
            <param name="errorLevel">Level of the error message so more verbose errors can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Error message</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ILogger.LogMessage(System.Int32,System.String)">
            <summary>
            Logs a message to the listening message output streams.
            </summary>
            <param name="messageLevel">Level of the message so more verbose messages can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Message to log</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.ILogger.LogMessage(System.Int32,System.String,LcmsNetSDK.Data.SampleData)">
            <summary>
            Logs a message to the listening message output streams.
            </summary>
            <param name="messageLevel">Level of the message so more verbose messages can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Message to log</param>
            <param name="sample">Sample data</param>
        </member>
        <member name="T:LcmsNetSDK.Logging.MessageLoggerArgs">
            <summary>
            Class that encapsulates a message generated by a component.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Logging.MessageLoggerArgs.#ctor(System.String)">
            <summary>
            Constructor that takes the error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:LcmsNetSDK.Logging.MessageLoggerArgs.#ctor(System.String,LcmsNetSDK.Data.SampleData)">
            <summary>
            Constructor that takes the error message.
            </summary>
            <param name="message">Error message</param>
            <param name="sample"></param>
        </member>
        <member name="P:LcmsNetSDK.Logging.MessageLoggerArgs.Message">
            <summary>
            Gets or sets the error message associated with the error.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Logging.MessageLoggerArgs.Sample">
            <summary>
            Gets or sets the sample data associated with this method.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Method.ILCEventParameter">
            <summary>
            Abstract Control class that allows the user to define how the value is grabbed
            from the user interface for setting a parameter value in the method editor.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.ILCEventParameter.ParameterValue">
            <summary>
            Gets the value set by the user.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.Method.ILCEventParameter.EventChanged">
            <summary>
            Fired when a parameter changes.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Method.InvalidTimeSpanException">
            <summary>
            Class thrown if the duration of an LC Event was invalid
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.InvalidTimeSpanException.#ctor(System.String)">
            <summary>
            Constructor for a new invalid time span exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:LcmsNetSDK.Method.LCEventRelative">
            <summary>
            Class that holds data for relative starting of LC-methods/events
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEventRelative.RelativeMethod">
            <summary>
            Gets or sets the LC method to start after an indeterminant event.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEventRelative.RelativeStartTime">
            <summary>
            Gets or sets the time to add to the relative method
            to properly start the above method relative to ourself
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Method.LCEvent">
             <summary>
             An atomic object operation used by stages in a method.
             </summary>
            
        </member>
        <member name="F:LcmsNetSDK.Method.LCEvent.mtimespan_duration">
            <summary>
            Duration of the event.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCEvent.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCEvent.Clone">
            <summary>
            Soft copies the current object returning a new classLCEvent.
            </summary>
            <returns>classLCEvent with same parameters as used with this method.</returns>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.RelativeMethod">
            <summary>
            Gets or sets the method to be started when an event is indeterminant.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.IsIndeterminant">
            <summary>
            Gets or sets whether the event is determinant or not.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.MethodAttribute">
            <summary>
            Gets or sets the method attributed reflected from the method.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.MethodData">
            <summary>
            gets or sets the method data associated with this event
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.Duration">
             <summary>
             Gets or sets the duration for this action.
            
             Throws:
                 classInvalidDurationException (value lt 0)
             </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCEvent.BreakHere">
            <summary>
            Notify UI that we're stopping simulation on this event as it is a breakpoint
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCEvent.PassBreakPoint">
            <summary>
            notify UI that we're moving passed this breakpoint.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.Device">
            <summary>
            Gets or sets the associated device to this method.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.End">
            <summary>
            Gets the end time for the event.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.HasDiscreteStates">
            <summary>
            Gets or sets if this event has discrete states that can be compared.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.HoldTime">
            <summary>
            Gets or sets the time to hold past the duration of this event in case
            the device has a method that needs to be held in a certain state for
            longer than it takes to execute the method.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.Method">
            <summary>
            Gets or sets the method used to perform the deterministic action required.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.Name">
            <summary>
            Gets or set the name of the event.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.OptimizeWith">
            <summary>
            Gets or sets whether to use this event for optimizing a method against.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.Parameters">
            <summary>
            Gets or sets the parameters to use when calling the method.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.ParameterNames">
            <summary>
            Gets or sets the array of parameter names.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.Start">
            <summary>
            Gets or sets the start time of this action.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCEvent.HadError">
            <summary>
            Gets or sets the flag indicating an error occurred during event execution.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Method.LCMethod">
            <summary>
            A method is a collection of LC-Events that define physical actions used to pipeline the control in an experiment.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethod.CONST_NAME_METHOD_KEY">
            <summary>
            Sample method key name.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethod.CONST_CURRENT_EVENT_NOT_RUN">
            <summary>
            Number indicating that a sample has not run.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethod.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethod.InitializedNonSerialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Function called when deserializing to avoid have Events or ActualEvents return null, since deserialization does not use the constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethod.mtime_start">
            <summary>
            Start time of the method
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethod.mspan_duration">
            <summary>
            Duration of the method.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethod.m_events">
            <summary>
            List of LC-events.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethod.m_actualEvents">
            <summary>
            List of LC-events whose values should reflect the actual start times and durations for an LC-Event.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethod.mdate_end">
            <summary>
            End date only calculated at call of End property to get around serialization issues.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethod.actualStart">
            <summary>
            Actual start time of the method
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethod.actualEnd">
            <summary>
            Actual end time of the method
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.RelativeMethod">
            <summary>
            Gets or sets the method for a
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.HasNonDeterministicStart">
            <summary>
            Gets or sets whether this has a deterministic start or not.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.Duration">
            <summary>
            Gets or sets the duration for this action.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.End">
            <summary>
            Gets the end time of the action.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.Events">
            <summary>
            Gets or sets the LC-Events to be performed by this method.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.ActualEvents">
            <summary>
            Gets or sets the LC-Events data that were performed by this method.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.Name">
            <summary>
            Gets or sets the name of the Method.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.Start">
            <summary>
            Gets the start time of this action.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.ActualStart">
            <summary>
            Gets the actual start of the sample.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.ActualEnd">
            <summary>
            Gets the actual end time of the sample.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.ActualDuration">
            <summary>
            Gets the actual duration of the experiment that was run.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.CurrentEventNumber">
            <summary>
            Gets or sets the event number being executed.  -1 = not run, 0-N is the current event, where N is the total events defined in LCEvents.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.Column">
            <summary>
            Gets or sets the index of the column that this method is associated with.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.IsSpecialMethod">
            <summary>
            Gets or sets whether the method is special.  This means that the method
            is not targeted to run on a column.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.AllowPreOverlap">
            <summary>
            Gets or sets whether to allow pre-method overlap.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethod.AllowPostOverlap">
            <summary>
            Gets or sets whether to allow post-method overlap.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethod.WritePerformanceData(System.String)">
            <summary>
            Writes the required data for this event to the path provided.
            </summary>
            <param name="directoryPath">Path of directory to write data to.</param>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethod.SetStartTime(System.DateTime)">
            <summary>
            Sets the start time for the method and updates the internal event start times.
            </summary>
            <param name="start">Time to start the method.</param>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethod.UpdateEventTimes">
            <summary>
            Updates the event start times.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethod.ToString">
            <summary>
            Returns the name of the method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethod.Clone">
            <summary>
            Clones the current method and returns a new method
            </summary>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethod.GetPropertyValues">
            <summary>
            Returns a string dictionary containing the key to the method rather than all of the
            events contained within.
            </summary>
            <returns>StringDictionary containing the name of the LC Method</returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethod.LoadPropertyValues(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Loads the name of the method and stores it.
            </summary>
            <param name="propValues"></param>
        </member>
        <member name="T:LcmsNetSDK.Method.LCMethodData">
            <summary>
            Class that holds the selected method and the value to pass for the parameters.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodData.#ctor(LcmsNetSDK.Devices.IDevice,System.Reflection.MethodInfo,LcmsNetSDK.Method.LCMethodEventAttribute,LcmsNetSDK.Method.LCMethodEventParameter)">
            <summary>
            Constructor that takes a method, and the value to call it with.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodData.BuildMethod">
            <summary>
            Builds the method by grabbing the values stored in the ILCEventParameter objects.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodData.ToString">
            <summary>
            Returns the name of the method in human readable form.
            </summary>
            <returns>Name of the method</returns>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodData.Method">
            <summary>
            Method that holds the given parameters.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodData.MethodAttribute">
            <summary>
            Gets or sets the method attribute information for this method.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodData.Parameters">
            <summary>
            Gets or sets the parameter values.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodData.OptimizeWith">
            <summary>
            Gets or sets whether this event is part of the optimization step.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.Method.LCMethodEventAttribute">
            <summary>
            Defines the attribute the scheduling algorithm and method handler will use to determine what methods to call
            while runnning a LC method.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodEventAttribute.#ctor(System.String,System.Double,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="methodName">Name of the method to display in the event list table of the method creator.</param>
            <param name="operationTime">The total operation time required by method to execute in milliseconds.  Methods must be guaranteed to execute within this range.</param>
            <param name="dataProvider">Name of object provided by device that will provide data to a user control dynamically created.</param>
            <param name="dataProviderIndex"></param>
            <param name="hasPerformanceData"></param>        
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodEventAttribute.#ctor(System.String,System.Double,System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="methodName">Name of the method to display in the event list table of the method creator.</param>
            <param name="operationTime">The total operation time required by method to execute in milliseconds.  Methods must be guaranteed to execute within this range.</param>
            <param name="hasDiscreteStates"></param>
            <param name="dataProvider">Name of object provided by device that will provide data to a user control dynamically created.</param>
            <param name="dataProviderIndex"></param>
            <param name="hasPerformanceData"></param>        
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodEventAttribute.#ctor(System.String,LcmsNetSDK.Method.MethodOperationTimeoutType,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="methodName">Name of the method to display in the event list table of the method creator.</param>
            <param name="timeout">Use when the timeout should be specified by the user in the first parameter</param>
            <param name="dataProvider">Name of object provided by device that will provide data to a user control dynamically created.</param>
            <param name="dataProviderIndex"></param>
            <param name="hasPerformanceData"></param>        
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodEventAttribute.#ctor(System.String,System.Boolean,System.Int32,System.Double,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor that allows the designer to say that this method is called with parameters specified by the user.
            </summary>
            <param name="methodName">Name to display to the user.</param>
            <param name="isSampleSpecific">Flag indicating that the sample contains information about how to run the method.</param>
            <param name="sampleParameterIndex"></param>
            <param name="operationTime">The total operation time required by method to execute in milliseconds.  Methods must be guaranteed to execute within this range.</param>
            <param name="dataProvider">Name of object provided by device that will provide data to a user control dynamically created.</param>
            <param name="dataProviderIndex"></param>
            <param name="hasPerformanceData"></param>        
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodEventAttribute.#ctor(System.String,LcmsNetSDK.Method.MethodOperationTimeoutType,System.Boolean,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="methodName">Name to display to the user.</param>
            <param name="timeoutType"></param>
            <param name="isSampleSpecific">Flag indicating that the sample contains information about how to run the method.</param>
            <param name="sampleParameterIndex"></param>
            <param name="dataProvider">Name of object provided by device that will provide data to a user control dynamically created.</param>        
            <param name="dataProviderIndex"></param>
            <param name="hasPerformanceData"></param>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodEventAttribute.#ctor(System.String,System.Boolean,System.Int32,System.Double,System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor that allows the designer to say that this method is called with parameters specified by the user.
            </summary>
            <param name="methodName">Name to display to the user.</param>
            <param name="isSampleSpecific">Flag indicating that the sample contains information about how to run the method.</param>
            <param name="sampleParameterIndex">Index of the required sample data.</param>
            <param name="operationTime">The total operation time required by method to execute in milliseconds.  Methods must be guaranteed to execute within this range.</param>
            <param name="discreteStates"></param>
            <param name="dataProvider">Name of object provided by device that will provide data to a user control dynamically created.</param>
            <param name="dataProviderIndex"></param>
            <param name="hasPerformanceData">Flag indicating whether this method has performance data or not.</param>        
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventAttribute.HasPerformanceData">
            <summary>
            Gets whether the method has performance data that should be associated with it or not.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventAttribute.DataProvider">
            <summary>
            Gets the name of the data provider that provides data for a given control.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventAttribute.DataProviderIndex">
            <summary>
            Gets the data provider index.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventAttribute.HasDiscreteParameters">
            <summary>
            Gets or sets whether this method has discreet states.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventAttribute.TimeoutType">
            <summary>
            Gets or sets if the timeout is specified by the first parameter value.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventAttribute.OperationTime">
            <summary>
            Gets or sets the total operation time required by method to execute in seconds.  Methods must be guaranteed to execute within this range.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventAttribute.SampleParameterIndex">
            <summary>
            Gets or sets the index of the sample parameter.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventAttribute.RequiresSampleInput">
            <summary>
            Gets or sets whether the method requires sample data.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventAttribute.Name">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodEventAttribute.ToString">
            <summary>
            Returns the name of the method.
            </summary>
            <returns>The name of the method attributing.</returns>
        </member>
        <member name="T:LcmsNetSDK.Method.LCMethodEventParameter">
            <summary>
            Class that pairs parameter values with controls and their names for editing them.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodEventParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventParameter.Names">
            <summary>
            Gets the names of each parameter.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventParameter.Values">
            <summary>
            Gets the values to use with the method.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventParameter.Controls">
            <summary>
            Gets the list of controls to edit the values.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodEventParameter.DataProviderNames">
            <summary>
            List of data provider names.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodEventParameter.AddParameter(System.Object,LcmsNetSDK.Method.ILCEventParameter,System.String,System.String)">
            <summary>
            Adds a parameter value to the list of parameters and it's associated editing control.
            </summary>
            <param name="parameter">Parameter value to add.</param>
            <param name="editControl">Edit control to use.</param>
            <param name="name"></param>
            <param name="dataProviderName">Name of the data provider to use.</param>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.Method.LCMethodOptimizer.Methods">
            <summary>
            Gets the list of methods currently being optimized.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethodOptimizer.CONST_REQUIRED_LC_EVENT_SPACING_SECONDS">
            <summary>
            Required number of seconds to space each LC-event by.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethodOptimizer.CONST_REQUIRED_LC_METHOD_SPACING_MILLISECONDS">
            <summary>
            Time required to space the lc methods in milliseconds.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.LCMethodOptimizer.CONST_NON_OVERLAPPING_EVENTS_OFFSET">
            <summary>
            Offset of non-overlapping events
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.BuildDeviceHash(LcmsNetSDK.Method.LCMethod)">
            <summary>
            Builds the hashmap of events for distinct devices.
            </summary>
            <param name="method">Method to build event table for.</param>
            <returns>Hash-map (dictionary) of events for each device.</returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.FindOverlappingEvents(System.Collections.Generic.List{LcmsNetSDK.Method.LCEvent},System.DateTime,System.TimeSpan)">
            <summary>
            Finds the events relevant to start that span the given duration.
            </summary>
            <param name="events"></param>
            <param name="startTime">Time to start looking for.</param>
            <param name="duration">Time span to search for.</param>
            <returns>List of events that occur between the given time span.</returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.CompareOverlappingEvent(LcmsNetSDK.Method.LCEvent,System.Collections.Generic.List{LcmsNetSDK.Method.LCEvent})">
            <summary>
            Compares the event to the list of events to see if the states are ok.  The events should be generated from the save device.
            </summary>
            <param name="aligneeEvent">Event to align with</param>
            <param name="events">Events whose states dictate how the alignee is shifted.</param>
            <returns>-1 if no offset required, >= 0 if states cannot be resolved and an offset required.</returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.IsMethodOverlapping(LcmsNetSDK.Method.LCMethod,LcmsNetSDK.Method.LCMethod)">
            <summary>
            Determines if two methods overlap in time.
            </summary>
            <param name="baselineMethod">Baseline method that should come before alignee method.</param>
            <param name="aligneeMethod">Alignee method that should come after the baseline method.</param>
            <returns>True if they overlap</returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.ConstructEvents(System.Collections.Generic.List{LcmsNetSDK.Method.LCMethodData})">
            <summary>
            Takes a set of LC method data and constructs a series of LC events spacing them out appropiately with timing.
            </summary>
            <param name="methods">Method selections to convert into events.</param>
            <returns>List of LC-events to perform as part of an overall method.</returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.AlignSamples(System.Collections.Generic.List{LcmsNetSDK.Data.SampleData})">
            <summary>
            Aligns a list of samples.
            </summary>
            <param name="samples">Samples to align.</param>
            <returns>True if aligned, false if not.</returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.AlignSamples(System.Collections.Generic.List{LcmsNetSDK.Data.SampleData},LcmsNetSDK.Data.SampleData)">
            <summary>
            Aligns a sample to the baseline samples.
            </summary>
            <param name="baselineSamples">Samples to align data to.</param>
            <param name="aligneeSample">Samples to align.</param>
            <returns>True if aligned, false if could not be.</returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.AlignMethods(LcmsNetSDK.Method.LCMethod,LcmsNetSDK.Method.LCMethod,System.Boolean)">
            <summary>
            Aligns and adjusts the alignee method to the baseline method.
            </summary>
            <param name="baselineMethod">Method to align the rest of the methods with.</param>
            <param name="aligneeMethod">Method to align to the baseline.</param>
            <param name="startAligneeAtBaselineStart">Flag indicating if we should set the start time of the alignee to the
            start time of the baseline.</param>
            <returns>True if the alignment was successful.  False if alignment failed.</returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.FindNonDeterministicEvent(LcmsNetSDK.Method.LCMethod)">
            <summary>
            Finds the last event that is non-deterministic
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.AlignMethods(System.Collections.Generic.List{LcmsNetSDK.Method.LCMethod},LcmsNetSDK.Method.LCMethod)">
            <summary>
            Aligns the alignee method to the baseline methods.  No update events are fired with this method..
            </summary>
            <param name="baselineMethods">Methods to align to.</param>
            <param name="aligneeMethod"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.AlignMethods(System.Collections.Generic.List{LcmsNetSDK.Method.LCMethod})">
            <summary>
            Aligns the list of methods together.
            </summary>
            <param name="methods">Methods to align.</param>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodOptimizer.AdjustForDaylightSavingsTransition(LcmsNetSDK.Method.LCMethod)">
            <summary>
            Adjust optimization to deal with DST transition.
            Adds 1 hour to specified method
            </summary>
            <param name="method"></param>
        </member>
        <member name="T:LcmsNetSDK.Method.LCMethodParameterNumericRange">
            <summary>
            Class for specifying a range of a paramter
            </summary>
        </member>
        <member name="M:LcmsNetSDK.Method.LCMethodParameterNumericRange.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="parameterName"></param>
            <param name="minimum"></param>
            <param name="maximum"></param>
        </member>
        <member name="T:LcmsNetSDK.Method.MethodOperationTimeoutType">
            <summary>
            Enumeration indicating what type of timeout is available.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.MethodOperationTimeoutType.Attribute">
            <summary>
            Timeout is specified in the attribute.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.MethodOperationTimeoutType.Parameter">
            <summary>
            Timeout is specified by the first parameter.
            </summary>
        </member>
        <member name="F:LcmsNetSDK.Method.MethodOperationTimeoutType.Indeterminate">
            <summary>
            Timeout is unknown at runtime.
            </summary>
        </member>
        <member name="T:LcmsNetSDK.System.INotifier">
            <summary>
            Inteface used to notify the system when something bad has happened (or status)
            </summary>
        </member>
        <member name="M:LcmsNetSDK.System.INotifier.GetStatusNotificationList">
            <summary>
            Get a list of possible status notifications for this device
            </summary>
            <returns>List of notifications</returns>
        </member>
        <member name="M:LcmsNetSDK.System.INotifier.GetErrorNotificationList">
            <summary>
            Gets a list of possible error notifications for this device
            </summary>
            <returns>List of notifications</returns>
        </member>
        <member name="E:LcmsNetSDK.System.INotifier.StatusUpdate">
            <summary>
            Fired when the status of a device has changed.
            </summary>
        </member>
        <member name="E:LcmsNetSDK.System.INotifier.Error">
            <summary>
            Fired when an error occurs on a device.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.System.TimeKeeper.ConvertToTimeZone(System.DateTime,System.String)">
            <summary>
            Convert a DateTime object to the specified time zone
            </summary>
            <param name="time">a DateTime object containing the date and time to convert</param>
            <param name="timeZoneId">a string representing the time zone to convert to</param>
            <returns>a DateTime object containing the date and time in the requested timezone</returns>
        </member>
        <member name="M:LcmsNetSDK.System.TimeKeeper.DoDateTimesSpanDaylightSavingsTransition(System.DateTime,System.DateTime)">
            <summary>
            Determine if two dates cross over a daylight savings time transition
            </summary>
            <param name="start">DateTime object containing the starting date and time</param>
            <param name="end">DateTime object containing the ending date and time</param>
            <returns>true if a DST transition occurs between the two DateTimes, false otherwise</returns>
        </member>
        <member name="M:LcmsNetSDK.System.TimeKeeper.AfterDSTTransition(LcmsNetSDK.Method.LCMethod)">
            <summary>
            Determine if a method starts after a DST transition(on the day of that DST transition). Used in
            optimization routine.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSDK.System.TimeKeeper.ConvertToDateTime(System.TimeZoneInfo.TransitionTime,System.Int32)">
            <summary>
            convert a daylight savings transition rule to a date
            </summary>
            <param name="transition">a TransitionTime struct for a specific TimeZoneInfo(and thus a specific timezone)</param>
            <param name="year">An int representing the year to apply the rule to</param>
            <returns>A DateTime object containing the exact date and time the transition occurs for the specified year</returns>
        </member>
        <member name="P:LcmsNetSDK.System.TimeKeeper.Now">
            <summary>
            Get current time as defined by the currently selected timezone
            </summary>
            <remarks>The time will be adjusted for daylight savings, as appropriate</remarks>
        </member>
        <member name="T:LcmsNetSDK.DMSToolsManager">
            <summary>
            Class that handles loading of DmsTools extensions using the Managed Extensibility Framework (MEF)
            </summary>
            <remarks>
            Looks for DLLs in C:\Users\Username\AppData\Roaming\LCMSNet\dmsExtensions
            that have classes marked with attribute Export(typeof(IDmsTools)) or attribute Export(typeof(IDMSValidator))
            Typically classes DMSDBTools and DMSSampleValidator in LcmsNetDmsTools.dll have those attributes
            </remarks>
        </member>
        <member name="F:LcmsNetSDK.DMSToolsManager.m_DMSMetaData">
            <summary>
            Reference to metadata of our selectedTools.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.DMSToolsManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:LcmsNetSDK.DMSToolsManager.SelectedTool">
            <summary>
            Get the selected Dms Tool, if none has been selected, returns the first available tool. If no tool is available, throws
            </summary>
        </member>
        <member name="P:LcmsNetSDK.DMSToolsManager.Validator">
            <summary>
            Find the first validator available that will work for the selected DMS tool and its version.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.DMSToolsManager.DmsTools">
            <summary>
            Contains the Managed Extensibility Framework (MEF) references to DmsTools
            </summary>
        </member>
        <member name="P:LcmsNetSDK.DMSToolsManager.Validators">
            <summary>
            Contains the MEF references to the validators
            </summary>
        </member>
        <member name="P:LcmsNetSDK.DMSToolsManager.ToolCount">
            <summary>
            Number of Dms Tools loaded.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.DMSToolsManager.Instance">
            <summary>
            Get a reference to the classDMSTools instance.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.DMSToolsManager.SelectTool(System.String,System.String)">
            <summary>
            Select the Dms tool for future use
            </summary>
            <param name="toolName">The name of the Dms tool to use</param>
            <param name="toolVersion">The version of the Dms tool to use</param>
        </member>
        <member name="M:LcmsNetSDK.DMSToolsManager.ListTools">
            <summary>
            List the name and version of all dms tools detected.
            </summary>
            <returns>a list of strings containing name and version for each detected IDmsTools extension.</returns>
        </member>
        <member name="F:LcmsNetSDK.ProgressEventArgs.CurrentTask">
            <summary>
            Description of the current task
            </summary>
        </member>
        <member name="F:LcmsNetSDK.ProgressEventArgs.PercentComplete">
            <summary>
            Value between 0 and 100
            </summary>
        </member>
        <member name="T:LcmsNetSDK.ICacheInterface">
            <summary>
            Interface for data classes that use the cache database
            </summary>
        </member>
        <member name="T:LcmsNetSDK.IFluidicsModelChecker">
            <summary>
            interface for checking validity of fluidics models
            </summary>
        </member>
        <member name="P:LcmsNetSDK.IFluidicsModelChecker.IsEnabled">
            <summary>
            gets or sets if this specific model check is enabled during the simulation.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.IFluidicsModelChecker.CheckModel">
            <summary>
            CheckModel does the actual checking of the fluidics model.
            </summary>
            <returns> An IEnumerable of ModelStatus objects representing model status changes
            </returns>
        </member>
        <member name="M:LcmsNetSDK.NotifyPropertyChangedExtensions.RaiseAndSetIfChanged``1(LcmsNetSDK.INotifyPropertyChangedExt,``0@,``0,System.String)">
            <summary>
            If the newValue is not equal to the backingField value (using default EqualityComparer), sets backingField and raises OnPropertyChanged
            </summary>
            <typeparam name="TRet"></typeparam>
            <param name="obj"></param>
            <param name="backingField"></param>
            <param name="newValue"></param>
            <param name="propertyName"></param>
            <returns>final value of backingField</returns>
        </member>
        <member name="M:LcmsNetSDK.NotifyPropertyChangedExtensions.RaiseAndSetIfChangedRetBool``1(LcmsNetSDK.INotifyPropertyChangedExt,``0@,``0,System.String)">
            <summary>
            If the newValue is not equal to the backingField value (using default EqualityComparer), sets backingField and raises OnPropertyChanged
            </summary>
            <typeparam name="TRet"></typeparam>
            <param name="obj"></param>
            <param name="backingField"></param>
            <param name="newValue"></param>
            <param name="propertyName"></param>
            <returns>true if changed, false if not</returns>
        </member>
        <member name="M:LcmsNetSDK.NotifyPropertyChangedExtensions.RaiseAndSetIfChangedLockCheck``1(LcmsNetSDK.INotifyPropertyChangedExt,``0@,``0,System.Boolean,System.String)">
            <summary>
            If isLocked is false and the newValue is not equal to the backingField value (using default EqualityComparer), sets backingField and raises OnPropertyChanged
            </summary>
            <typeparam name="TRet"></typeparam>
            <param name="obj"></param>
            <param name="backingField"></param>
            <param name="newValue"></param>
            <param name="isLocked"></param>
            <param name="propertyName"></param>
            <returns>final value of backingField</returns>
        </member>
        <member name="M:LcmsNetSDK.NotifyPropertyChangedExtensions.RaiseAndSetIfChangedLockCheckRetBool``1(LcmsNetSDK.INotifyPropertyChangedExt,``0@,``0,System.Boolean,System.String)">
            <summary>
            If isLocked is false and the newValue is not equal to the backingField value (using default EqualityComparer), sets backingField and raises OnPropertyChanged
            </summary>
            <typeparam name="TRet"></typeparam>
            <param name="obj"></param>
            <param name="backingField"></param>
            <param name="newValue"></param>
            <param name="isLocked"></param>
            <param name="propertyName"></param>
            <returns>true if changed, false if not</returns>
        </member>
        <member name="M:LcmsNetSDK.NotifyPropertyChangedExtensions.RaisePropertyChanged(LcmsNetSDK.INotifyPropertyChangedExt,System.String)">
            <summary>
            Raise the PropertyChanged event for the given/current property
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
        </member>
        <member name="T:LcmsNetSDK.IRandomizerInterface">
            <summary>
            Inteface for sample run order randomizer
            </summary>
        </member>
        <member name="T:LcmsNetSDK.LCMSSettings">
            <summary>
            Class to handle program settings data
            </summary>
        </member>
        <member name="F:LcmsNetSDK.LCMSSettings.m_Settings">
            <summary>
            String dictionary to hold settings data
            </summary>
        </member>
        <member name="M:LcmsNetSDK.LCMSSettings.#cctor">
            <summary>
            Constructor to initialize static members
            </summary>
        </member>
        <member name="M:LcmsNetSDK.LCMSSettings.SetParameter(System.String,System.String)">
            <summary>
            Adds to or changes a parameter in the string dictionary
            </summary>
            <param name="ItemKey">Key for item</param>
            <param name="ItemValue">Value of item</param>
        </member>
        <member name="M:LcmsNetSDK.LCMSSettings.GetParameter(System.String)">
            <summary>
            Retrieves specified item from string dictionary
            </summary>
            <param name="itemKey">Key for item to be retrieved</param>
            <returns>The value for the setting, or an empty string if the itemKey is not defined</returns>
        </member>
        <member name="M:LcmsNetSDK.LCMSSettings.GetParameter(System.String,System.Boolean)">
            <summary>
            Retrieves specified item from string dictionary, converting it to a boolean
            </summary>
            <param name="itemKey">Key for item to be retrieved</param>
            <param name="defaultValue">Default value</param>
            <returns>
            The value for the setting, or defaultValue if the itemKey
            is not defined or if it cannot be converted to a boolean
            </returns>
            <remarks>If the value is an integer, will return false if 0 or true if non-zero</remarks>
        </member>
        <member name="M:LcmsNetSDK.LCMSSettings.GetParameter(System.String,System.Int32)">
            <summary>
            Retrieves specified item from string dictionary, converting it to an integer
            </summary>
            <param name="itemKey">Key for item to be retrieved</param>
            <param name="defaultValue">Default value</param>
            <returns>
            The value for the setting, or defaultValue if the itemKey
            is not defined or if it cannot be converted to an integer
            </returns>
        </member>
        <member name="M:LcmsNetSDK.LCMSSettings.GetParameter(System.String,System.Double)">
            <summary>
            Retrieves specified item from string dictionary, converting it to a double
            </summary>
            <param name="itemKey">Key for item to be retrieved</param>
            <param name="defaultValue">Default value</param>
            <returns>
            The value for the setting, or defaultValue if the itemKey
            is not defined or if it cannot be converted to a double
            </returns>
        </member>
        <member name="T:LcmsNetSDK.ModelStatus">
            <summary>
            class to hold information on the Fluidics Model's status.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.ModelStatus.UID">
            <summary>
            Unique ID representing this status change.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.ModelStatus.Name">
            <summary>
            The name/topic of the status change
            </summary>
        </member>
        <member name="P:LcmsNetSDK.ModelStatus.Description">
            <summary>
            A description of the status change
            </summary>
        </member>
        <member name="P:LcmsNetSDK.ModelStatus.Category">
            <summary>
             The status category of Error, Information, or Warning.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.ModelStatus.EventDevice">
            <summary>
            returns The IDevice that triggered this status change, if known.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.ModelStatus.Event">
            <summary>
            returns the event that triggered the status change, if set.
            </summary>
        </member>
        <member name="P:LcmsNetSDK.ModelStatus.Time">
            <summary>
            returns the time that the status change was recorded.
            </summary>
        </member>
        <member name="M:LcmsNetSDK.ModelStatus.ToString">
            <summary>
            provides a string representation of what happened on this mode status change.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LcmsNetSDK.ModelStatusChangeEventArgs">
            <summary>
            Event args for ModelCheck event
            </summary>
        </member>
        <member name="T:LcmsNetSDK.PlugInDisplayNameAttribute">
            <summary>
            Custom attribute class for display of plugin name
            </summary>
        </member>
        <member name="M:LcmsNetSDK.PlugInDisplayNameAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="DisplayName">Plugin name to be used for display purposes</param>
        </member>
        <member name="M:LcmsNetSDK.PlugInDisplayNameAttribute.ToString">
            <summary>
            Overrides base class ToString method
            </summary>
            <returns>String representing display name</returns>
        </member>
    </members>
</doc>
