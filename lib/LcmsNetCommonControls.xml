<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LcmsNetCommonControls</name>
    </assembly>
    <members>
        <member name="T:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerAdorner">
            <summary>
            Control for displaying text cues when a textbox/combobox is set to null
            </summary>
            <remarks>Copied from https://jasonkemp.ca/blog/the-missing-net-4-cue-banner-in-wpf-i-mean-watermark-in-wpf/ and https://stackoverflow.com/questions/833943/watermark-hint-text-placeholder-textbox-in-wpf </remarks>
        </member>
        <member name="F:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerAdorner.contentPresenter">
            <summary>
            <see cref="T:System.Windows.Controls.ContentPresenter"/> that holds the cue banner
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerAdorner.#ctor(System.Windows.UIElement,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerAdorner"/> class
            </summary>
            <param name="adornedElement"><see cref="T:System.Windows.UIElement"/> to be adorned</param>
            <param name="cueBanner">The cue banner</param>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerAdorner.VisualChildrenCount">
            <summary>
            Gets the number of children for the <see cref="T:System.Windows.Media.ContainerVisual"/>.
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerAdorner.Control">
            <summary>
            Gets the control that is being adorned
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerAdorner.GetVisualChild(System.Int32)">
            <summary>
            Returns a specified child <see cref="T:System.Windows.Media.Visual"/> for the parent <see cref="T:System.Windows.Media.ContainerVisual"/>.
            </summary>
            <param name="index">A 32-bit signed integer that represents the index value of the child <see cref="T:System.Windows.Media.Visual"/>. The value of index must be between 0 and <see cref="P:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerAdorner.VisualChildrenCount"/> - 1.</param>
            <returns>The child <see cref="T:System.Windows.Media.Visual"/>.</returns>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Implements any custom measuring behavior for the adorner.
            </summary>
            <param name="constraint">A size to constrain the adorner to.</param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the amount of layout space needed by the adorner.</returns>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="T:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService">
            <summary>
            Control for displaying text cues when a textbox/combobox is set to null
            </summary>
            <remarks>Copied from https://jasonkemp.ca/blog/the-missing-net-4-cue-banner-in-wpf-i-mean-watermark-in-wpf/ and https://stackoverflow.com/questions/833943/watermark-hint-text-placeholder-textbox-in-wpf </remarks>
        </member>
        <member name="F:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.CueBannerProperty">
            <summary>
            CueBanner Attached Dependency Property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.ShowCueBannerOnComboBoxUnmatchProperty">
            <summary>
            ShowCueBannerOnComboBoxUnmatch Attached Dependency Property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.itemsControls">
            <summary>
            Dictionary of ItemsControls
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.GetCueBanner(System.Windows.DependencyObject)">
            <summary>
            Gets the CueBanner property.  This dependency property indicates the CueBanner for the control.
            </summary>
            <param name="d"><see cref="T:System.Windows.DependencyObject"/> to get the property from</param>
            <returns>The value of the CueBanner property</returns>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.SetCueBanner(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the CueBanner property.  This dependency property indicates the CueBanner for the control.
            </summary>
            <param name="d"><see cref="T:System.Windows.DependencyObject"/> to set the property on</param>
            <param name="value">value of the property</param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.GetShowCueBannerOnComboBoxUnmatch(System.Windows.DependencyObject)">
            <summary>
            Gets the GetShowCueBannerOnComboBoxUnmatch property.  This dependency property indicates if the CueBanner should be shown when a ComboBox's SelectedItem has no match in ItemsSource.
            </summary>
            <param name="d"><see cref="T:System.Windows.DependencyObject"/> to get the property from</param>
            <returns>The value of the GetShowCueBannerOnComboBoxUnmatch property</returns>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.SetShowCueBannerOnComboBoxUnmatch(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the GetShowCueBannerOnComboBoxUnmatch property.  This dependency property indicates if the CueBanner should be shown when a ComboBox's SelectedItem has no match in ItemsSource.
            </summary>
            <param name="d"><see cref="T:System.Windows.DependencyObject"/> to set the property on</param>
            <param name="value">value of the property</param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.OnCueBannerChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the CueBanner property.
            </summary>
            <param name="d"><see cref="T:System.Windows.DependencyObject"/> that fired the event</param>
            <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.Control_GotKeyboardFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the GotFocus event on the control
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.Control_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the Loaded and LostFocus event on the control
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.ItemsSourceChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the items source changed event
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.ItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <summary>
            Event handler for the items changed event
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Controls.Primitives.ItemsChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.Control_ContentChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Remove the CueBanner if the text has changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.RemoveCueBanner(System.Windows.UIElement)">
            <summary>
            Remove the CueBanner from the specified element
            </summary>
            <param name="control">Element to remove the CueBanner from</param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.ShowCueBanner(System.Windows.Controls.Control)">
            <summary>
            Show the CueBanner on the specified control
            </summary>
            <param name="control">Control to show the CueBanner on</param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.CueBannerService.ShouldShowCueBanner(System.Windows.Controls.Control)">
            <summary>
            Indicates whether or not the CueBanner should be shown on the specified control
            </summary>
            <param name="c"><see cref="T:System.Windows.Controls.Control"/> to test</param>
            <returns>true if the CueBanner should be shown; false otherwise</returns>
        </member>
        <member name="T:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2">
             <summary>
             A generic dictionary, which allows both its keys and values
             to be garbage collected if there are no other references
             to them than from the dictionary itself.
             </summary>
            
             <remarks>
             If either the key or value of a particular entry in the dictionary
             has been collected, then both the key and value become effectively
             unreachable. However, left-over WeakReference objects for the key
             and value will physically remain in the dictionary until
             RemoveCollectedEntries is called. This will lead to a discrepancy
             between the Count property and the number of iterations required
             to visit all of the elements of the dictionary using its
             enumerator or those of the Keys and Values collections. Similarly,
             CopyTo will copy fewer than Count elements in this situation.
             </remarks>
             <remarks>Copied from https://blogs.msdn.microsoft.com/nicholg/2006/06/04/presenting-weakdictionarytkey-tvalue/ </remarks>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor
            </summary>
            <param name="capacity"></param>
            <param name="comparer"></param>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.Count">
            <inheritdoc />
            <remarks>
            WARNING: The count returned here may include entries for which
            either the key or value objects have already been garbage
            collected. Call RemoveCollectedEntries to weed out collected
            entries and update the count accordingly.</remarks>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.SetValue(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakDictionary`2.RemoveCollectedEntries">
            <summary>
            Removes the left-over weak references for entries in the dictionary
            whose key or value has already been reclaimed by the garbage
            collector. This will reduce the dictionary's Count by the number
            of dead key-value pairs that were eliminated.
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakReference2`1">
            <summary>
            Adds strong typing to WeakReference.Target using generics. Also,
            the Create factory method is used in place of a constructor
            to handle the case where target is null, but we want the
            reference to still appear to be alive.
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakNullReference`1">
            <summary>
            Provides a weak reference to a null target object, which, unlike
            other weak references, is always considered to be alive. This
            facilitates handling null dictionary values, which are perfectly
            legal.
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakKeyReference`1">
            <summary>
            Provides a weak reference to an object of the given type to be used in
            a WeakDictionary along with the given comparer.
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Controls.CueBannerOverlay.WeakKeyComparer`1">
            <summary>
            Compares objects of the given type or WeakKeyReferences to them
            for equality based on the given comparer. Note that we can only
            implement IEqualityComparer&lt;T&gt; for T = object as there is no
            other common base between T and WeakKeyReference&lt;T&gt;. We need a
            single comparer to handle both types because we don't want to
            allocate a new weak reference for every lookup.
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2">
            <summary>
            Represents a dictionary mapping keys to values.
            </summary>
            <remarks>
            Provides the plumbing for the portions of IDictionary&lt;TKey,
            TValue&gt; which can reasonably be implemented without any
            dependency on the underlying representation of the dictionary.
            </remarks>
            <remarks>Copied from https://blogs.msdn.microsoft.com/nicholg/2006/06/04/implementing-idictionarytkey-tvalue-isnt-trivial/ </remarks>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.Count">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.SetValue(`0,`1)">
            <summary>
            Set the value of the key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.Values">
            <inheritdoc />
        </member>
        <member name="P:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
             <summary>
            
             </summary>
             <param name="item"></param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.BaseDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier">
            <summary>
            Class for monitoring propertyChanged/valueChanged dependency properties of WPF controls
            </summary>
            <remarks>This class takes advantage of the fact that bindings use weak references to manage associations so the
            class will not root the object who property changes it is watching. It also uses a WeakReference to maintain a
             reference to the object whose property it is watching without rooting that object. In this way, you can
            maintain a collection of these objects so that you can unhook the property change later without worrying about
            that collection rooting the object whose values you are watching.</remarks>
            <remarks>Copied from https://stackoverflow.com/questions/23682232/how-can-i-fix-the-dependencypropertydescriptor-addvaluechanged-memory-leak-on-at and https://agsmith.wordpress.com/2008/04/07/propertydescriptor-addvaluechanged-alternative/ </remarks>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="propertySource"></param>
            <param name="path"></param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Constructor
            </summary>
            <param name="propertySource"></param>
            <param name="property"></param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.Windows.PropertyPath)">
            <summary>
            Constructor
            </summary>
            <param name="propertySource"></param>
            <param name="property"></param>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.PropertySource">
            <summary>
            Get the source of the property, if available
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.IsSourceAlive">
            <summary>
            Returns false if the source has been garbage collected
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.ValueProperty">
            <summary>
            Identifies the <see cref="P:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.Value"/> dependency property
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.Value">
            <summary>
            Returns/sets the value of the property
            </summary>
            <seealso cref="F:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.ValueProperty"/>
        </member>
        <member name="E:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.ValueChanged">
            <summary>
            Event handler for valueChanged
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.CueBannerOverlay.WpfPropertyChangeNotifier.Dispose">
            <summary>
            Clean up
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Controls.SerialPortData">
            <summary>
            Class to contain information about a serial port
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.SerialPortData.PortName">
            <summary>
            Name of the port. Usually 'COMxx'
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.SerialPortData.PortDescription">
            <summary>
            Descriptive information about the port
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.SerialPortData.EdgePortPortNumber">
            <summary>
            Port number on edgeport device; set to 0 for non-edgeport devices
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.SerialPortData.EdgePortSerialNum">
            <summary>
            Serial Number of the EdgePort device
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.SerialPortData.DisplayString">
            <summary>
            Descriptive string to display in UI
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.SerialPortData.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="portName"></param>
            <param name="portDescription"></param>
            <param name="edgePortSerialNum"></param>
            <param name="edgePortPortNumber"></param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.SerialPortData.CompareTo(LcmsNetCommonControls.Controls.SerialPortData)">
            <summary>
            IComparable implementation for sorting
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.SerialPortData.ToString">
            <summary>
            Overridden ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:LcmsNetCommonControls.Controls.SerialPortGenericData">
            <summary>
            Static class to hold system-wide serial port information for UI uses
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.SerialPortGenericData.SerialPortNames">
            <summary>
            List of serial port names
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.SerialPortGenericData.SerialPorts">
            <summary>
            List of serial ports
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.SerialPortGenericData.UpdateSerialPorts">
            <summary>
            Updates the serial port name list
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Controls.RepeatButtonCommands">
            <summary>
            A repeat button for WPF that can fire a secondary command on release
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.RepeatButtonCommands.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.RepeatButtonCommands.ReleaseCommand">
            <summary>
            Get or set the ReleaseCommand property
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.RepeatButtonCommands.ReleaseCommandParameter">
            <summary>
            Reflects the parameter to pass to the ReleaseCommandProperty upon execution
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.RepeatButtonCommands.ReleaseCommandTarget">
            <summary>
            The target element on which to fire the release command
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Controls.RepeatButtonCommands.ReleaseCommandProperty">
            <summary>
            ReleaseCommand Dependency Property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Controls.RepeatButtonCommands.ReleaseCommandParameterProperty">
            <summary>
            ReleaseCommandParameter Dependency Property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Controls.RepeatButtonCommands.ReleaseCommandTargetProperty">
            <summary>
            ReleaseCommandTarget Dependency Property
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.RepeatButtonCommands.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Actions to perform on left mouse button up
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.RepeatButtonCommands.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Actions to perform on key up
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:LcmsNetCommonControls.Controls.SerialPortPropertyGrid">
            <summary>
            Interaction logic for SerialPortPropertyGrid.xaml
            </summary>
            <summary>
            SerialPortPropertyGrid
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.SerialPortPropertyGrid.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Controls.SerialPortPropertyGrid.SerialPorts">
            <summary>
            List of available serial ports.
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Controls.SerialPortPropertyGrid.PropertyValueChangedEvent">
            <summary>
            Routed event for PropertyValueChanged
            </summary>
        </member>
        <member name="E:LcmsNetCommonControls.Controls.SerialPortPropertyGrid.PropertyValueChanged">
            <summary>
            Event fired when a property value is changed
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Controls.SerialPortPropertyGrid.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadView">
            <summary>
            Interaction logic for ContactClosureReadView.xaml
            </summary>
            <summary>
            ContactClosureReadView
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1">
            <summary>
            Base view model for a contact closure read
            </summary>
            <typeparam name="T">Enum, with the output port options</typeparam>
        </member>
        <member name="T:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.ContactClosureState">
            <summary>
            State for a contact closure
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.ContactClosureState.Unknown">
            <summary>
            State is unknown
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.ContactClosureState.Open">
            <summary>
            State is open
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.ContactClosureState.Closed">
            <summary>
            State is closed
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.inputPortComboBoxOptions">
            <summary>
            InputPortComboBoxOptions backing field
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.InputPortComboBoxOptions">
            <summary>
            The Port options to show in the ComboBox
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.ReadStatusCommand">
            <summary>
            Command to read the signal
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.Voltage">
            <summary>
            The voltage at the input
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.AnalogVoltageThreshold">
            <summary>
            The minimum voltage for an analog input to be considered "closed"
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.MinimumAnalogVoltage">
            <summary>
            The minimum voltage for an analog input
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.MaximumAnalogVoltage">
            <summary>
            The maximum voltage for an analog input
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.IsAnalog">
            <summary>
            If the selected port is an analog port
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.ReadReport">
            <summary>
            A report status message that may be shown to the user
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.Port">
            <summary>
            Gets or sets the intput port of the device.
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.Status">
            <summary>
            Signal status
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.Device">
            <summary>
            The device this view model is associated with
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.GetDefaultView">
            <summary>
            Get the Default view for this view model
            </summary>
            <returns></returns>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.ContactClosureRead.ContactClosureReadViewModelBase`1.ReadStatus">
            <summary>
            Handles reading the status of the signal when the user presses the button to do so.
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureView">
            <summary>
            Interaction logic for ContactClosureView.xaml
            </summary>
            <summary>
            ContactClosureView
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1">
            <summary>
            Base view model for a contact closure
            </summary>
            <typeparam name="T">Enum, with the output port options</typeparam>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.outputPortComboBoxOptions">
            <summary>
            OutputPortComboBoxOptions backing field
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.OutputPortComboBoxOptions">
            <summary>
            The Port options to show in the ComboBox
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.MinimumVoltage">
            <summary>
            The minimum voltage allowed for the contact closure
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.MaximumVoltage">
            <summary>
            The maximum voltage allowed by the contact closure
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.MinimumPulseLength">
            <summary>
            The minimum pulse length allowed by the contact closure
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.PulseLength">
            <summary>
            The pulse length to run
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.Voltage">
            <summary>
            The voltage of the pulse
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.SendPulseCommand">
            <summary>
            Command to trigger a pulse
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.Port">
            <summary>
            Gets or sets the output port of the device.
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.Device">
            <summary>
            The device this view model is associated with
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.GetDefaultView">
            <summary>
            Get the Default view for this view model
            </summary>
            <returns></returns>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.ContactClosure.ContactClosureViewModelBase`1.SendPulse">
            <summary>
            Handles sending a pulse to the Contact Closure when the user presses the button to do so.
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Devices.NetworkStart.NetStartView">
            <summary>
            Interaction logic for NetStartView.xaml
            </summary>
            <summary>
            NetStartView
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.NetworkStart.NetStartView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.NetworkStart.NetStartView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase">
            <summary>
            Control for detector triggered by network start signal (presently just a stub)
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.methodComboBoxOptions">
            <summary>
            MethodComboBoxOptions backing field
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.MethodComboBoxOptions">
            <summary>
            The methods to show in the ComboBox
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.SelectedMethod">
            <summary>
            The currently selected method
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.SampleName">
            <summary>
            The Sample name
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.Status">
            <summary>
            The device status
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.IPAddress">
            <summary>
            Device IP Address
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.Port">
            <summary>
            Device network port
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.Device">
            <summary>
            Device associated with this control
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.RefreshMethodsCommand">
            <summary>
            Command to refresh the methods list
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.StartAcquisitionCommand">
            <summary>
            Command to start acquisition
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.StopAcquisitionCommand">
            <summary>
            Command to stop acquisition
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.GetDefaultView">
            <summary>
            The default view to use with this view model
            </summary>
            <returns></returns>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.StartAcquisition">
            <summary>
            Manually starts the acquisition.
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.StopAcquisition">
            <summary>
            Manually stops the acquisition.
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.RefreshMethods">
            <summary>
            Reload the methods
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.IPAddressUpdated">
            <summary>
            Called when the IP Address is updated
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.PortUpdated">
            <summary>
            Called when the network port is updated
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.NetworkStart.NetStartViewModelBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            PropertyChanged event handler to monitor certain properties and call methods when they are changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel">
            <summary>
            View Model for displaying a plot with pump monitoring data
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.#ctor">
            <summary>
            Default constructor for the pump display view control that takes no arguments
            Calling this constructor is only for the IDE designer.
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Pump name</param>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.PumpName">
            <summary>
            Name of the pump
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.DataPressureMonitorPlot">
            <summary>
            The Data Pressure Plot
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.DataFlowMonitorPlot">
            <summary>
            The Data Flow Plot
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.DataBMonitorPlot">
            <summary>
            The Percent B Plot
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.InitializePlots">
            <summary>
            Initialize the plotting capabilities
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.DisplayMonitoringData(System.Object,LcmsNetSDK.Devices.PumpDataEventArgs)">
            <summary>
            Displays the monitoring data.
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.SetPumpName(System.String)">
            <summary>
            Set the pump name
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.PlotData">
            <summary>
            Class to hold information for plotting
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.PlotData.Time">
            <summary>
            The timestamp
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.PlotData.Pressure">
            <summary>
            Pressure
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.PlotData.Flow">
            <summary>
            Flow
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.PlotData.PercentB">
            <summary>
            Percent B
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.Pumps.PumpDisplayViewModel.PlotData.#ctor(System.DateTime,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="time"></param>
            <param name="pressure"></param>
            <param name="flow"></param>
            <param name="percentB"></param>
        </member>
        <member name="T:LcmsNetCommonControls.Devices.Pumps.PumpDisplayView">
            <summary>
            Interaction logic for PumpDisplayView.xaml
            </summary>
            <summary>
            PumpDisplayView
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.Pumps.PumpDisplayView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Devices.Pumps.PumpDisplayView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Styles.LcmsNetStyles">
            <summary>
            Class that is reference-able from XAML for referring to styles defined in this assembly
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Styles.LcmsNetStyles.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Styles.LcmsNetStyles.#ctor(System.String)">
            <summary>
            Constructor that takes a resource key
            </summary>
            <param name="resourceKey"></param>
        </member>
        <member name="M:LcmsNetCommonControls.Styles.LcmsNetStyles.GetStyle(System.String)">
            <summary>
            Get the given resource as a style
            </summary>
            <param name="resourceKey"></param>
            <returns>style if the resource key refers to a style; an empty style if it doesn't.</returns>
        </member>
        <member name="T:LcmsNetCommonControls.Styles.StyleRefExtension">
            <summary>
            Base class for styles that need to be used in other assemblies
            </summary>
            <remarks>https://www.codeproject.com/Tips/542018/Simply-Using-WPF-Styles-in-Other-Assemblies-or-Oth</remarks>
        </member>
        <member name="F:LcmsNetCommonControls.Styles.StyleRefExtension.ResDict">
            <summary>
            Property for specific resource dictionary
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Styles.StyleRefExtension.ResourceKey">
            <summary>
            Resource key which we want to extract
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Styles.StyleRefExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Overriding base function which will return key from RD
            </summary>
            <param name="serviceProvider">Not used</param>
            <returns>Object from RD</returns>
        </member>
        <member name="M:LcmsNetCommonControls.Styles.StyleRefExtension.GetStyle">
            <summary>
            Get the given resource as a style
            </summary>
            <returns>style if the resource key refers to a style; an empty style if it doesn't.</returns>
        </member>
        <member name="M:LcmsNetCommonControls.Styles.StyleRefExtension.GetStyleBase(System.String)">
            <summary>
            Get the given resource as a style
            </summary>
            <param name="resourceKey"></param>
            <returns>style if the resource key refers to a style; an empty style if it doesn't.</returns>
        </member>
        <member name="T:LcmsNetCommonControls.ViewModels.PopoutViewModel">
            <summary>
            ViewModel to wrap a viewmodel that can be popped out of the containing control into a separate window
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.ViewModels.PopoutViewModel.#ctor">
            <summary>
            Calling this constructor is only for the windows WPF designer.
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.ViewModels.PopoutViewModel.#ctor(ReactiveUI.ReactiveObject)">
            <summary>
            Constructor
            </summary>
            <param name="child">The child view model</param>
        </member>
        <member name="P:LcmsNetCommonControls.ViewModels.PopoutViewModel.Child">
            <summary>
            The child view model
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.ViewModels.PopoutViewModel.TackUnTackCommand">
            <summary>
            Command to tack or untack this control's view
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.ViewModels.PopoutViewModel.Tacked">
            <summary>
            If the control is tacked or not
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.ViewModels.PopoutViewModel.TackType">
            <summary>
            Text to display on the button
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Views.PopoutView">
            <summary>
            Interaction logic for PopoutView.xaml
            </summary>
            <summary>
            PopoutView
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Views.PopoutView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutView.HorizontalButtonAlignmentProperty">
            <summary>
            Button horizontal position dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutView.VerticalButtonAlignmentProperty">
            <summary>
            Button vertical position dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutView.OverlayButtonProperty">
            <summary>
            Button position overlay dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutView.ButtonGridRowProperty">
            <summary>
            Button grid row dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutView.ButtonGridColumnProperty">
            <summary>
            Button grid column dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutView.PreferVerticalBorderProperty">
            <summary>
            Button border preference dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutView.TitleProperty">
            <summary>
            Popout window title dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutView.WindowWidthProperty">
            <summary>
            Popout window width dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutView.WindowHeightProperty">
            <summary>
            Popout window height dependency property
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutView.HorizontalButtonAlignment">
            <summary>
            Horizontal positioning of the popout button
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutView.VerticalButtonAlignment">
            <summary>
            Vertical positioning of the popout button
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutView.OverlayButton">
            <summary>
            If the button should be overlaid on top of the content
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutView.ButtonGridRow">
            <summary>
            Positioning of the button in the display grid rows. Set internally.
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutView.ButtonGridColumn">
            <summary>
            Positioning of the button in the display grid columns. Set internally.
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutView.PreferVerticalBorder">
            <summary>
            When button is not overlaid and placed in a corner, if a vertical border is prefered over a horizontal border
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutView.Title">
            <summary>
            Title to be used when displaying the window - used for databinding
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutView.WindowWidth">
            <summary>
            Default width of the popped-out window
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutView.WindowHeight">
            <summary>
            Default height of the popped-out window
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Views.PopoutView.TryActivateWindow">
            <summary>
            Try to activate the popped-out window
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Views.PopoutView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:LcmsNetCommonControls.Views.PopoutWindow">
            <summary>
            Interaction logic for PopoutWindow.xaml
            </summary>
            <summary>
            PopoutWindow
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Views.PopoutWindow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutWindow.HorizontalButtonAlignmentProperty">
            <summary>
            Button horizontal position dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutWindow.VerticalButtonAlignmentProperty">
            <summary>
            Button vertical position dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutWindow.OverlayButtonProperty">
            <summary>
            Button position overlay dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutWindow.ButtonGridRowProperty">
            <summary>
            Button grid row dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutWindow.ButtonGridColumnProperty">
            <summary>
            Button grid column dependency property
            </summary>
        </member>
        <member name="F:LcmsNetCommonControls.Views.PopoutWindow.PreferVerticalBorderProperty">
            <summary>
            Button border preference dependency property
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutWindow.HorizontalButtonAlignment">
            <summary>
            Horizontal positioning of the popout button
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutWindow.VerticalButtonAlignment">
            <summary>
            Vertical positioning of the popout button
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutWindow.OverlayButton">
            <summary>
            If the button should be overlaid on top of the content
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutWindow.ButtonGridRow">
            <summary>
            Positioning of the button in the display grid rows. Set internally.
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutWindow.ButtonGridColumn">
            <summary>
            Positioning of the button in the display grid columns. Set internally.
            </summary>
        </member>
        <member name="P:LcmsNetCommonControls.Views.PopoutWindow.PreferVerticalBorder">
            <summary>
            When button is not overlaid and placed in a corner, if a vertical border is prefered over a horizontal border
            </summary>
        </member>
        <member name="M:LcmsNetCommonControls.Views.PopoutWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
