<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LcmsNetData</name>
    </assembly>
    <members>
        <member name="T:LcmsNetData.Data.CartConfigInfo">
            <summary>
            Class to hold information about a single LC Cart Config
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.CartConfigInfo.CartConfigName">
            <summary>
            Name of LC Cart Config
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.CartConfigInfo.CartName">
            <summary>
            Name of Cart
            </summary>
        </member>
        <member name="M:LcmsNetData.Data.CartConfigInfo.#ctor(System.String,System.String)">
            <summary>
            Constructor: Known values
            </summary>
            <param name="cartConfigName"></param>
            <param name="cartName"></param>
        </member>
        <member name="M:LcmsNetData.Data.CartConfigInfo.#ctor">
            <summary>
            Constructor: for auto-population
            </summary>
        </member>
        <member name="T:LcmsNetData.Data.ConvertVialPosition">
            <summary>
            Utilities for converting Vial (aka Well) position between LCMSNet and LCMS values
            </summary>
        </member>
        <member name="M:LcmsNetData.Data.ConvertVialPosition.ConvertVialToString(System.Int32,System.Byte)">
            <summary>
            Converts a vial position in LCMS format (integer 1 - 96) to LCMSNet format (string A01 - H12)
            Supports vials beyond 97, where vial 312 is vial Z12, then vial 313 is AA01, 314 is AA02, etc.
            Highest vial number supported is 8424, which is ZZ12
            </summary>
            <param name="vialPosition">Vial position as integer</param>
            <param name="columnsPerRow">Columns per row (default is 12)</param>
            <returns>LCMSNet string-formatted vial position, or Z99 if an error</returns>
            <remarks>
            Vial 1 is position A01
            ...
            Vial 12 is position A12
            Vial 13 is position B01
            ...
            Vial 24 is position B12
            Vial 25 is position C01
            ...
            Vial 96 is position H12
            </remarks>
        </member>
        <member name="M:LcmsNetData.Data.ConvertVialPosition.ConvertVialToInt(System.String,System.Byte)">
            <summary>
            Converts a vial position in LCMSNet format (string A1 - H12) to LCMS format (integer 1 - 96)
            Supports positions beyond H12, where position Z12 is vial 312, then position AA01 is vial 313, AA02 is 314, etc.
            Highest vial position supported is ZZ12, which is vial 8424
            </summary>
            <param name="vialPosition">Vial position as string</param>
            <param name="columnsPerRow">Columns per row (default is 12)</param>
            <returns>Vial position represented as an integer, or 9999 if the format of vialPosition is not recognized</returns>
        </member>
        <member name="M:LcmsNetData.Data.ConvertVialPosition.VerifyLCMSNetVialPosition">
            <summary>
            Use this function to view example column positions when columns per row is 12, 24, 36, ... 96
            Also validates the round trip conversion from vial number to vial position then back to vial number
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.RequestName">
            <summary>
            Name of request in DMS. Becomes sample name in LCMS and forms part
            of dataset name sample after run
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.DatasetName">
            <summary>
            Gets or sets the name of the dataset after editing the request name.
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.RequestID">
            <summary>
            Numeric ID of request in DMS
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.InstrumentGroup">
            <summary>
            Instrument group specified in DMS for the request (only used when <see cref="P:LcmsNetData.Data.IDmsData.RequestID"/> &gt; 0)
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.Experiment">
            <summary>
            Experiment name
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.DatasetType">
            <summary>
            Dataset type (ie, HMS-MSn, HMS, etc)
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.WorkPackage">
            <summary>
            Work Package/charge code
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.EMSLUsageType">
            <summary>
            EMSL usage type
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.EMSLProposalID">
            <summary>
            EUS user proposal ID
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.EMSLProposalUser">
            <summary>
            EUS user list
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.CartName">
            <summary>
            Name of cart used for sample run
            </summary>
            <remarks>This is an editable field even if the DMS Request has been resolved.</remarks>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.CartConfigName">
            <summary>
            Name of cart configuration for the current cart
            </summary>
            <remarks>This is an editable field even if the DMS Request has been resolved.</remarks>
        </member>
        <member name="P:LcmsNetData.Data.IDmsData.Comment">
            <summary>
            Comment field
            </summary>
        </member>
        <member name="T:LcmsNetData.Data.IDmsDataForSampleRun">
            <summary>
            IDmsData interface with additional data about the sample source and run instructions
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsDataForSampleRun.SelectedToRun">
            <summary>
            Flag for determining if request from DMS has been selected for running
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsDataForSampleRun.MRMFileID">
            <summary>
            File ID for locating MRM file to download
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsDataForSampleRun.Block">
            <summary>
            Block ID for blocking/randomizing
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsDataForSampleRun.RunOrder">
            <summary>
            Run order for blocking/randomizing
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IDmsDataForSampleRun.Batch">
            <summary>
            Batch number for blocking/randomizing
            </summary>
        </member>
        <member name="T:LcmsNetData.Data.InstrumentInfo">
             <summary>
             Class to hold data about the instrument connected to the LC cart
             </summary>
            
        </member>
        <member name="P:LcmsNetData.Data.InstrumentInfo.DMSName">
            <summary>
            Instrument name as used in DMS
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.InstrumentInfo.CommonName">
            <summary>
            User-friendly name used for pick lists
            </summary>
            <remarks>Instrument name, then a space, then the instrument description</remarks>
        </member>
        <member name="P:LcmsNetData.Data.InstrumentInfo.InstrumentGroup">
            <summary>
            Instrument grouping in DMS (a rough 'instrument class/type' specification)
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.InstrumentInfo.CaptureMethod">
            <summary>
            Gets or sets the name of the method used to capture data from this instrument
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.InstrumentInfo.Status">
            <summary>
            Gets or sets the instrument status
            </summary>
            <remarks>Status will be active, inactive, or offline</remarks>
        </member>
        <member name="P:LcmsNetData.Data.InstrumentInfo.HostName">
            <summary>
            Gets or sets the name of the computer that holds the data for the instrument
            </summary>
            <remarks>May contain a domain suffix, for example VPro02.bionet</remarks>
        </member>
        <member name="P:LcmsNetData.Data.InstrumentInfo.SharePath">
            <summary>
            Gets or sets the name of the shared folder for retrieving the instrument data
            </summary>
            <remarks>Typically a single folder name, like ProteomicsData\ but might contain subfolders, e.g. UserData\Nikola\AMOLF\</remarks>
        </member>
        <member name="M:LcmsNetData.Data.InstrumentInfo.Clone">
            <summary>
            Clone - make a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="T:LcmsNetData.Data.IPalData">
            <summary>
            Interface for storing PAL data. Only needed (available in LcmsNetData) for populating this data when reading samples from DMS, for LCMSNet.
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IPalData.Well">
            <summary>
            Gets or sets the vial number to pull sample from.
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IPalData.PALTray">
            <summary>
            Name of the PAL tray to use.
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IPalData.Method">
            <summary>
            Name of the PAL method to run.
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IPalData.WellPlate">
            <summary>
            The Wellplate name that is stored in DMS.
            </summary>
        </member>
        <member name="T:LcmsNetData.Data.IRequestedRunData">
            <summary>
            The necessary set of data objects needed to store DMS requested run information
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IRequestedRunData.DmsBasicData">
            <summary>
            Gets the list of data downloaded from DMS for this sample
            </summary>
        </member>
        <member name="T:LcmsNetData.Data.IRequestedRunDataWithPalData">
            <summary>
            The necessary set of data objects needed to store DMS requested run information,
            including the wellplate/vial tray and well/vial location of the sample in the requested run
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.IRequestedRunDataWithPalData.PAL">
            <summary>
            Gets the pal data associated with this sample.
            </summary>
        </member>
        <member name="T:LcmsNetData.Data.ISampleData">
            <summary>
            Interface for use by SQLiteTools to limit object types stored to a "Queue" cache
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ISampleData.Operator">
            <summary>
            Name of operator (as entered in DMS)
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ISampleData.InstrumentMethod">
            <summary>
            Gets or sets the instrument method.
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ISampleData.Volume">
            <summary>
            Gets or sets the volume of the sample to inject.
            </summary>
        </member>
        <member name="M:LcmsNetData.Data.ISampleData.GetNewNonDummy">
            <summary>
            Get a new non-dummy instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:LcmsNetData.Data.ITriggerFileData">
            <summary>
            Provides data for creating trigger files
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ITriggerFileData.DmsBasicData">
            <summary>
            DMS Data: Request ID, Dataset Name, etc.
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ITriggerFileData.RunStart">
            <summary>
            Time when the Acquisition started
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ITriggerFileData.RunFinish">
            <summary>
            Time when the Acquisition ended
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ITriggerFileData.ColumnName">
            <summary>
            Name of the column used (as entered in DMS)
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ITriggerFileData.InstrumentName">
            <summary>
            Name of the instrument (as entered in DMS)
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ITriggerFileData.SeparationType">
            <summary>
            Separation type used (as entered in DMS)
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ITriggerFileData.Operator">
            <summary>
            Name of operator (as entered in DMS)
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ITriggerFileData.CaptureShareName">
            <summary>
            Name of the shared directory used to access the dataset. If empty, the instrument default (in DMS) is used.
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ITriggerFileData.CaptureSubdirectoryPath">
            <summary>
            Subdirectory containing the dataset
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ITriggerFileData.InterestRating">
            <summary>
            DMS interest rating (or 'Unreviewed')
            </summary>
        </member>
        <member name="T:LcmsNetData.Data.ITriggerFilePalData">
            <summary>
            Provides data for creating trigger files, including Well Plate data
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.ITriggerFilePalData.PAL">
            <summary>
            Autosampler information, specifically Well Plate Number and Well Number
            </summary>
        </member>
        <member name="T:LcmsNetData.Data.PersistenceSettingAttribute">
            <summary>
            Settings for object persistence (generally to the SQLite database)
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.PersistenceSettingAttribute.IgnoreProperty">
            <summary>
            If the property should not be persisted or loaded
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.PersistenceSettingAttribute.ColumnName">
            <summary>
            The Column Name for this property in the database. If blank, the property name will be used.
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.PersistenceSettingAttribute.ColumnNamePrefix">
            <summary>
            For LCMSNet objects: The prefix used for column names for properties in the object
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.PersistenceSettingAttribute.PropertyGetOverrideMethod">
            <summary>
            For special read handling: Supply the name of the method to use for reading the value (preferably using the "nameof(...)" compiler method). Needs to have a unique name, no parameters, and return the same type as the property.
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.PersistenceSettingAttribute.IsUniqueColumn">
            <summary>
            For special read handling: Supply the name of the method to use for reading the value (preferably using the "nameof(...)" compiler method). Needs to have a unique name, no parameters, and return the same type as the property.
            </summary>
        </member>
        <member name="M:LcmsNetData.Data.PersistenceSettingAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LcmsNetData.Data.PersistenceSettingAttribute.#ctor(System.String)">
            <summary>
            Constructor to simply set a prefix
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="T:LcmsNetData.Data.SampleQueryData">
            <summary>
            Class for holding data used to query DMS for samples to run
            </summary>
        </member>
        <member name="F:LcmsNetData.Data.SampleQueryData.m_QueryParams">
            <summary>
            Dictionary of filters to apply when finding requested runs
            </summary>
            <remarks>Keys are RequestName, MinRequestNum, MaxRequestNum, BatchID, Block, Cart, or Wellplate</remarks>
        </member>
        <member name="P:LcmsNetData.Data.SampleQueryData.RequestName">
            <summary>
            Requested run name
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.SampleQueryData.MinRequestNum">
            <summary>
            Minimum request ID (integer)
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.SampleQueryData.MaxRequestNum">
            <summary>
            Maximum request ID (integer)
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.SampleQueryData.BatchID">
            <summary>
            Batch ID to use
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.SampleQueryData.Block">
            <summary>
            Block to use
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.SampleQueryData.Cart">
            <summary>
            Cart name (supports partial match)
            </summary>
        </member>
        <member name="M:LcmsNetData.Data.SampleQueryData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LcmsNetData.Data.SampleQueryData.AddQueryFilter(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            If a specified filter is defined, append the appropriate SQL to the query builder
            </summary>
            <param name="queryBldr"></param>
            <param name="sqlFilter"></param>
            <param name="filterName"></param>
        </member>
        <member name="M:LcmsNetData.Data.SampleQueryData.GetValueIfFound(System.String)">
            <summary>
            Tests for existence of spcified key in dictionary
            </summary>
            <param name="dictKey">Key name</param>
            <returns>Key value if found, otherwise empty string</returns>
        </member>
        <member name="M:LcmsNetData.Data.SampleQueryData.BuildSqlString">
            <summary>
            Build the query string for retrieving data from V_Scheduled_Run_Export
            </summary>
            <returns></returns>
        </member>
        <member name="T:LcmsNetData.Data.TriggerFileTools">
            <summary>
            Tools for generation of trigger files
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.TriggerFileTools.ErrorMessages">
             <summary>
            Error messages generated by GenerateTriggerFile or MoveLocalTriggerFiles
             </summary>
             <remarks>This list is cleared each time GenerateTriggerFile or MoveLocalTriggerFiles is called</remarks>
        </member>
        <member name="M:LcmsNetData.Data.TriggerFileTools.GenerateTriggerFile(LcmsNetData.Data.ITriggerFileData)">
            <summary>
            Generates a trigger file for a sample
            </summary>
            <param name="sample"></param>
        </member>
        <member name="M:LcmsNetData.Data.TriggerFileTools.GenerateXmlDoc(LcmsNetData.Data.ITriggerFileData)">
            <summary>
            Generates the XML-formatted trigger file contents
            </summary>
            <param name="sample">sample object for sample that was run</param>
        </member>
        <member name="M:LcmsNetData.Data.TriggerFileTools.ConvertTimeLocalToUtc(System.DateTime)">
            <summary>
            Converts a string representing a local time to UTC time
            </summary>
            <param name="localTime">Local time</param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetData.Data.TriggerFileTools.AddParam(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Adds a trigger file parameter to the XML document defining the file contents
            </summary>
            <param name="parent">Parent element to add the parameter to</param>
            <param name="paramName">Name of the parameter to add</param>
            <param name="paramValue">Value of the parameter</param>
        </member>
        <member name="M:LcmsNetData.Data.TriggerFileTools.GetTriggerFileName(LcmsNetData.Data.ITriggerFileData,System.String)">
            <summary>
            Get the trigger file name for the provided dataset
            </summary>
            <param name="sample"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetData.Data.TriggerFileTools.SaveFile(System.Xml.XmlDocument,LcmsNetData.Data.ITriggerFileData)">
            <summary>
            Write the trigger file
            </summary>
            <param name="doc">XML document to be written</param>
            <param name="sample">Name of the sample this trigger file is for</param>
            <returns>The remote (or local) trigger file path if successful; an empty string if an error</returns>
        </member>
        <member name="M:LcmsNetData.Data.TriggerFileTools.CheckLocalTriggerFiles">
            <summary>
            Tests for presence of local trigger files
            </summary>
            <returns>TRUE if trigger files present, FALSE otherwise</returns>
        </member>
        <member name="M:LcmsNetData.Data.TriggerFileTools.MoveLocalTriggerFiles">
            <summary>
            Moves local trigger files to a remote server
            </summary>
        </member>
        <member name="T:LcmsNetData.Data.UserInfo">
            <summary>
            Class to hold data about LcmsNet users
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.UserInfo.UserName">
            <summary>
            Name of user
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.UserInfo.PayrollNum">
            <summary>
            Payroll number (network login) of user
            </summary>
        </member>
        <member name="T:LcmsNetData.Data.WorkPackageInfo">
            <summary>
            Class to hold information about a work package
            </summary>
        </member>
        <member name="M:LcmsNetData.Data.WorkPackageInfo.#ctor">
            <summary>
            Constructor: for auto-population
            </summary>
        </member>
        <member name="M:LcmsNetData.Data.WorkPackageInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor: Known Values
            </summary>
            <param name="chargeCode"></param>
            <param name="state"></param>
            <param name="subAccount"></param>
            <param name="wbs"></param>
            <param name="title"></param>
            <param name="ownerUserName"></param>
            <param name="ownerName"></param>
        </member>
        <member name="P:LcmsNetData.Data.WorkPackageInfo.ChargeCode">
            <summary>
            Charge code for this work package
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.WorkPackageInfo.State">
            <summary>
            Valid content: (Tuple, separated by a comma and space) "(Active|Inactive)(, (used|unused|old))?"
            'Active' can be by itself, 'used' is only paired with 'Inactive'
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.WorkPackageInfo.SubAccount">
            <summary>
            Work package subaccount name
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.WorkPackageInfo.WorkBreakdownStructure">
            <summary>
            Work package group (WBS) title
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.WorkPackageInfo.Title">
            <summary>
            Work package title
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.WorkPackageInfo.OwnerUserName">
            <summary>
            Username of work package owner
            </summary>
        </member>
        <member name="P:LcmsNetData.Data.WorkPackageInfo.OwnerName">
            <summary>
            Name of work package owner
            </summary>
        </member>
        <member name="M:LcmsNetData.Data.WorkPackageInfo.ToString">
            <summary>
            ToString override for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="F:LcmsNetData.ProgressEventArgs.CurrentTask">
            <summary>
            Description of the current task
            </summary>
        </member>
        <member name="F:LcmsNetData.ProgressEventArgs.PercentComplete">
            <summary>
            Value between 0 and 100
            </summary>
        </member>
        <member name="M:LcmsNetData.NotifyPropertyChangedExtensions.RaiseAndSetIfChanged``1(LcmsNetData.INotifyPropertyChangedExt,``0@,``0,System.String)">
            <summary>
            If the newValue is not equal to the backingField value (using default EqualityComparer), sets backingField and raises OnPropertyChanged
            </summary>
            <typeparam name="TRet"></typeparam>
            <param name="obj"></param>
            <param name="backingField"></param>
            <param name="newValue"></param>
            <param name="propertyName"></param>
            <returns>final value of backingField</returns>
        </member>
        <member name="M:LcmsNetData.NotifyPropertyChangedExtensions.RaiseAndSetIfChangedRetBool``1(LcmsNetData.INotifyPropertyChangedExt,``0@,``0,System.String)">
            <summary>
            If the newValue is not equal to the backingField value (using default EqualityComparer), sets backingField and raises OnPropertyChanged
            </summary>
            <typeparam name="TRet"></typeparam>
            <param name="obj"></param>
            <param name="backingField"></param>
            <param name="newValue"></param>
            <param name="propertyName"></param>
            <returns>true if changed, false if not</returns>
        </member>
        <member name="M:LcmsNetData.NotifyPropertyChangedExtensions.RaiseAndSetIfChangedLockCheck``1(LcmsNetData.INotifyPropertyChangedExt,``0@,``0,System.Boolean,System.String)">
            <summary>
            If isLocked is false and the newValue is not equal to the backingField value (using default EqualityComparer), sets backingField and raises OnPropertyChanged
            </summary>
            <typeparam name="TRet"></typeparam>
            <param name="obj"></param>
            <param name="backingField"></param>
            <param name="newValue"></param>
            <param name="isLocked"></param>
            <param name="propertyName"></param>
            <returns>final value of backingField</returns>
        </member>
        <member name="M:LcmsNetData.NotifyPropertyChangedExtensions.RaiseAndSetIfChangedLockCheckRetBool``1(LcmsNetData.INotifyPropertyChangedExt,``0@,``0,System.Boolean,System.String)">
            <summary>
            If isLocked is false and the newValue is not equal to the backingField value (using default EqualityComparer), sets backingField and raises OnPropertyChanged
            </summary>
            <typeparam name="TRet"></typeparam>
            <param name="obj"></param>
            <param name="backingField"></param>
            <param name="newValue"></param>
            <param name="isLocked"></param>
            <param name="propertyName"></param>
            <returns>true if changed, false if not</returns>
        </member>
        <member name="M:LcmsNetData.NotifyPropertyChangedExtensions.RaisePropertyChanged(LcmsNetData.INotifyPropertyChangedExt,System.String)">
            <summary>
            Raise the PropertyChanged event for the given/current property
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
        </member>
        <member name="T:LcmsNetData.LCMSSettings">
            <summary>
            Class to handle program settings data
            </summary>
        </member>
        <member name="F:LcmsNetData.LCMSSettings.m_Settings">
            <summary>
            String dictionary to hold settings data
            </summary>
        </member>
        <member name="M:LcmsNetData.LCMSSettings.#cctor">
            <summary>
            Constructor to initialize static members
            </summary>
        </member>
        <member name="M:LcmsNetData.LCMSSettings.SetParameter(System.String,System.String)">
            <summary>
            Adds to or changes a parameter in the string dictionary
            </summary>
            <param name="ItemKey">Key for item</param>
            <param name="ItemValue">Value of item</param>
        </member>
        <member name="M:LcmsNetData.LCMSSettings.GetParameter(System.String)">
            <summary>
            Retrieves specified item from string dictionary
            </summary>
            <param name="itemKey">Key for item to be retrieved</param>
            <returns>The value for the setting, or an empty string if the itemKey is not defined</returns>
        </member>
        <member name="M:LcmsNetData.LCMSSettings.GetParameter(System.String,System.Boolean)">
            <summary>
            Retrieves specified item from string dictionary, converting it to a boolean
            </summary>
            <param name="itemKey">Key for item to be retrieved</param>
            <param name="defaultValue">Default value</param>
            <returns>
            The value for the setting, or defaultValue if the itemKey
            is not defined or if it cannot be converted to a boolean
            </returns>
            <remarks>If the value is an integer, will return false if 0 or true if non-zero</remarks>
        </member>
        <member name="M:LcmsNetData.LCMSSettings.GetParameter(System.String,System.Int32)">
            <summary>
            Retrieves specified item from string dictionary, converting it to an integer
            </summary>
            <param name="itemKey">Key for item to be retrieved</param>
            <param name="defaultValue">Default value</param>
            <returns>
            The value for the setting, or defaultValue if the itemKey
            is not defined or if it cannot be converted to an integer
            </returns>
        </member>
        <member name="M:LcmsNetData.LCMSSettings.GetParameter(System.String,System.Double)">
            <summary>
            Retrieves specified item from string dictionary, converting it to a double
            </summary>
            <param name="itemKey">Key for item to be retrieved</param>
            <param name="defaultValue">Default value</param>
            <returns>
            The value for the setting, or defaultValue if the itemKey
            is not defined or if it cannot be converted to a double
            </returns>
        </member>
        <member name="M:LcmsNetData.LCMSSettings.LoadSettings(System.Configuration.ApplicationSettingsBase,System.Collections.Specialized.NameValueCollection,System.Boolean)">
             <summary>
             Loads settings into <see cref="T:LcmsNetData.LCMSSettings"/>, with some settings allowed to override others. All logging is to the returned list.
             </summary>
             <param name="settings">Collection of settings for the application, usually the Application default-style 'Settings' class</param>
             <param name="overridingSettings">Collection of settings that override the settings in <paramref name="settings"/>, usually from something like 'ConfigurationManager.AppSettings' (this can come from a file specified in 'app.config')</param>
             <param name="allowOverridingUserSettings">If false, <paramref name="overridingSettings"/> entries that override user-scope settings will be ignored and reported via the returned list. If true, they will override user-scope settings.</param>
             <returns>Errors/log entries that occurred while loading settings</returns>
             <remarks>
             Some examples of sources for <paramref name="overridingSettings"/>:<br />
             in app.config/configuration/configSections:<br />
             <code>
             &lt;section name="developerAppSettings" type="System.Configuration.NameValueFileSectionHandler, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/&gt;<br />
             </code>
             <br />
             in app.config/configuration:<br />
             <code>
             &lt;appSettings file="LcmsNet_PersistentSettings.config"/&gt;<br />
             &lt;developerAppSettings file="LcmsNet_DeveloperSettings.config"/&gt;<br />
             </code>
            <br />
             LcmsNet_PersistentSettings.config:<br />
             <code>
             &lt;appSettings&gt;<br />
               &lt;add key="CartName" value="No_Cart" /&gt;<br />
             &lt;/appSettings&gt;<br />
             </code>
            <br />
             LcmsNet_DeveloperSettings.config:<br />
             <code>
             &lt;developerAppSettings&gt;<br />
               &lt;add key="CartName" value="(none)" /&gt;<br />
             &lt;/developerAppSettings&gt;<br />
             </code>
            <br />
             To load them into the program:<br />
             <code>
             var persistentSettings = ConfigurationManager.AppSettings;<br />
             var devSettings = (NameValueCollection)(ConfigurationManager.GetSection("developerAppSettings"));<br />
             // ... (Choosing logic for using persistentSettings or devSettings)<br />
             </code>
             </remarks>
        </member>
        <member name="T:LcmsNetData.Logging.ApplicationLogger">
            <summary>
            Class that marshals messages from different components to different logging and streaming capabilities.
            </summary>
        </member>
        <member name="T:LcmsNetData.Logging.ApplicationLogger.DelegateErrorHandler">
            <summary>
            Delegate method handler defining how an error event will be called.
            </summary>
            <param name="errorLevel"></param>
            <param name="args"></param>
        </member>
        <member name="T:LcmsNetData.Logging.ApplicationLogger.DelegateMessageHandler">
            <summary>
            Delegate method handler defining how a message event will be called.
            </summary>
            <param name="messageLevel"></param>
            <param name="args"></param>
        </member>
        <member name="F:LcmsNetData.Logging.ApplicationLogger.CONST_STATUS_LEVEL_CRITICAL">
            <summary>
            Critical and should always be logged.
            </summary>
        </member>
        <member name="F:LcmsNetData.Logging.ApplicationLogger.CONST_STATUS_LEVEL_DETAILED">
            <summary>
            More detailed error levels.
            </summary>
        </member>
        <member name="F:LcmsNetData.Logging.ApplicationLogger.CONST_STATUS_LEVEL_USER">
            <summary>
            Less likely to need to be logged.
            </summary>
        </member>
        <member name="E:LcmsNetData.Logging.ApplicationLogger.Message">
            <summary>
            Found when the application finds a message.
            </summary>
        </member>
        <member name="E:LcmsNetData.Logging.ApplicationLogger.Error">
            <summary>
            Fired when the application has an error.
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.ApplicationLogger.LogError(System.Int32,System.String,System.Exception,System.Object)">
            <summary>
            Logs an error to the listening error output streams
            </summary>
            <param name="errorLevel">Level of the error message so more verbose errors can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Error message</param>
            <param name="ex">Exception</param>
            <param name="errorObject">Data for a sample</param>
        </member>
        <member name="M:LcmsNetData.Logging.ApplicationLogger.LogError(LcmsNetData.Logging.LogLevel,System.String,System.Exception,System.Object)">
            <summary>
            Logs an error to the listening error output streams
            </summary>
            <param name="errorLevel">Level of the error message so more verbose errors can be filtered</param>
            <param name="message">Error message</param>
            <param name="ex">Exception</param>
            <param name="errorObject">Data for a sample</param>
        </member>
        <member name="M:LcmsNetData.Logging.ApplicationLogger.LogMessage(System.Int32,System.String,System.Object)">
            <summary>
            Logs a message to the listening message output streams.
            </summary>
            <param name="messageLevel">Level of the message so more verbose messages can be filtered (0 is most important, 5 is least important)</param>
            <param name="message">Message to log</param>
            <param name="errorObject">Sample data</param>
            <remarks>
            When MessageLevel is 0, only critical errors are logged
            When MessageLevel is 5, all messages are logged
            </remarks>
        </member>
        <member name="M:LcmsNetData.Logging.ApplicationLogger.LogMessage(LcmsNetData.Logging.LogLevel,System.String,System.Object)">
            <summary>
            Logs a message to the listening message output streams.
            </summary>
            <param name="messageLevel">Level of the message so more verbose messages can be filtered</param>
            <param name="message">Message to log</param>
            <param name="errorObject">Sample data</param>
            <remarks>
            When MessageLevel is 0, only critical errors are logged
            When MessageLevel is 5, all messages are logged
            </remarks>
        </member>
        <member name="M:LcmsNetData.Logging.ApplicationLogger.StartUpLogging">
            <summary>
            Start up the separate-thread logging
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.ApplicationLogger.ShutDownLogging">
            <summary>
            Properly shut down the separate-thread logging
            </summary>
        </member>
        <member name="T:LcmsNetData.Logging.ErrorLoggerArgs">
            <summary>
            Class that encapsulates an error found by a component.
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.ErrorLoggerArgs.#ctor(System.String)">
            <summary>
            Constructor that takes the error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:LcmsNetData.Logging.ErrorLoggerArgs.#ctor(System.String,System.Object)">
            <summary>
            Constructor that takes the error message.
            </summary>
            <param name="message">Error message</param>
            <param name="errorObject"></param>
        </member>
        <member name="M:LcmsNetData.Logging.ErrorLoggerArgs.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that takes an error message and an exception.
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Exception found</param>
        </member>
        <member name="M:LcmsNetData.Logging.ErrorLoggerArgs.#ctor(System.String,System.Exception,System.Object)">
            <summary>
            Constructor that takes an error message and an exception.
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Exception found</param>
            <param name="errorObject"></param>
        </member>
        <member name="M:LcmsNetData.Logging.ErrorLoggerArgs.#ctor(System.Int32,System.String,System.Exception,System.Object)">
            <summary>
            Constructor that takes an error message and an exception.
            </summary>
            <param name="logLevel">Error logging level</param>
            <param name="message">Error message</param>
            <param name="ex">Exception found</param>
            <param name="errorObject"></param>
        </member>
        <member name="P:LcmsNetData.Logging.ErrorLoggerArgs.Exception">
            <summary>
            Gets the exception associated with the error message if any.
            </summary>
        </member>
        <member name="T:LcmsNetData.Logging.FileLogger">
            <summary>
            Logs errors and messages to a file
            </summary>
        </member>
        <member name="F:LcmsNetData.Logging.FileLogger.logFileCreated">
            <summary>
            Flag indicating whether a log file has been created for this program start.
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.FileLogger.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:LcmsNetData.Logging.FileLogger.DelegateLogPathReporter">
            <summary>
            Delegate method handler defining how an error event will be called.
            </summary>
            <param name="args"></param>
        </member>
        <member name="E:LcmsNetData.Logging.FileLogger.LogFilePathDefined">
            <summary>
            Fired when the log file path is defined
            </summary>
        </member>
        <member name="P:LcmsNetData.Logging.FileLogger.LogPath">
            <summary>
            Gets the file log path.
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.FileLogger.GetExceptionMessage(System.Exception,System.String@)">
            <summary>
            Unwraps nested exception messages
            </summary>
            <param name="ex">Input exception</param>
            <param name="msg">Message(s) contained in exception</param>
        </member>
        <member name="M:LcmsNetData.Logging.FileLogger.WriteToLogFile(System.String)">
            <summary>
            Writes a string to the log file
            </summary>
            <param name="msgStr">String to write</param>
        </member>
        <member name="M:LcmsNetData.Logging.FileLogger.CreateLogFilePath">
            <summary>
            Creates a log file name
            </summary>
            <returns>Name and path of error log file</returns>
        </member>
        <member name="P:LcmsNetData.Logging.IHandlesLogging.ErrorLevel">
            <summary>
            Error message importance level (0 is most important, 5 is least important)
            </summary>
        </member>
        <member name="P:LcmsNetData.Logging.IHandlesLogging.MessageLevel">
            <summary>
            Status message importance level (0 is most important, 5 is least important)
            </summary>
            <remarks>
            When MessageLevel is 0, only critical errors are logged
            When MessageLevel is 5, all messages are logged
            </remarks>
        </member>
        <member name="P:LcmsNetData.Logging.IHandlesLogging.ErrorLogLevel">
            <summary>
            Error message importance level
            </summary>
        </member>
        <member name="P:LcmsNetData.Logging.IHandlesLogging.MessageLogLevel">
            <summary>
            Status message importance level
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.IHandlesLogging.LogError(System.Int32,LcmsNetData.Logging.ErrorLoggerArgs)">
            <summary>
            Logs an error
            </summary>
            <param name="errorLevel">Error level</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:LcmsNetData.Logging.IHandlesLogging.LogMessage(System.Int32,LcmsNetData.Logging.MessageLoggerArgs)">
            <summary>
            Logs a message
            </summary>
            <param name="msgLevel">Message level</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="T:LcmsNetData.Logging.LogLevel">
            <summary>
            Logging levels enum
            </summary>
        </member>
        <member name="F:LcmsNetData.Logging.LogLevel.Fatal">
            <summary>
            Errors causing program shutdown
            </summary>
        </member>
        <member name="F:LcmsNetData.Logging.LogLevel.Error">
            <summary>
            Errors that don't cause program shutdown, but are undesirable and probably should be shown to the user
            </summary>
        </member>
        <member name="F:LcmsNetData.Logging.LogLevel.Warning">
            <summary>
            Warnings or anomalies in program execution that might be of interest
            </summary>
        </member>
        <member name="F:LcmsNetData.Logging.LogLevel.Info">
            <summary>
            Informational messages
            </summary>
        </member>
        <member name="F:LcmsNetData.Logging.LogLevel.Debug">
            <summary>
            Info that will be useful when trying to debug an issue
            </summary>
        </member>
        <member name="F:LcmsNetData.Logging.LogLevel.Trace">
            <summary>
            Verbose info that may be useful in debugging
            </summary>
        </member>
        <member name="F:LcmsNetData.Logging.LogLevel.ExcessivelyVerbose">
            <summary>
            Doesn't really need to be logged
            </summary>
        </member>
        <member name="P:LcmsNetData.Logging.LogWriterBase.ErrorLevel">
            <summary>
            Error message importance level (0 is most important, 5 is least important)
            </summary>
        </member>
        <member name="P:LcmsNetData.Logging.LogWriterBase.MessageLevel">
            <summary>
            Status message importance level (0 is most important, 5 is least important)
            </summary>
            <remarks>
            When MessageLevel is 0, only critical errors are logged
            When MessageLevel is 5, all messages are logged
            </remarks>
        </member>
        <member name="P:LcmsNetData.Logging.LogWriterBase.ErrorLogLevel">
            <summary>
            Error message importance level
            </summary>
        </member>
        <member name="P:LcmsNetData.Logging.LogWriterBase.MessageLogLevel">
            <summary>
            Status message importance level
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.LogWriterBase.LogError(System.Int32,LcmsNetData.Logging.ErrorLoggerArgs)">
            <summary>
            Logs an error
            </summary>
            <param name="errorLevel">Error level</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:LcmsNetData.Logging.LogWriterBase.LogMessage(System.Int32,LcmsNetData.Logging.MessageLoggerArgs)">
            <summary>
            Logs a message
            </summary>
            <param name="msgLevel">Message level</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="T:LcmsNetData.Logging.MessageLoggerArgs">
            <summary>
            Class that encapsulates a message generated by a component.
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.MessageLoggerArgs.#ctor(System.String)">
            <summary>
            Constructor that takes the error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:LcmsNetData.Logging.MessageLoggerArgs.#ctor(System.String,System.Object)">
            <summary>
            Constructor that takes the error message.
            </summary>
            <param name="message">Error message</param>
            <param name="errorObject"></param>
        </member>
        <member name="M:LcmsNetData.Logging.MessageLoggerArgs.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            Constructor that takes the error message.
            </summary>
            <param name="logLevel">Error logging level</param>
            <param name="message">Error message</param>
            <param name="errorObject"></param>
        </member>
        <member name="P:LcmsNetData.Logging.MessageLoggerArgs.Message">
            <summary>
            Gets the error message associated with the error.
            </summary>
        </member>
        <member name="P:LcmsNetData.Logging.MessageLoggerArgs.ErrorObject">
            <summary>
            Gets the sample data associated with this method.
            </summary>
        </member>
        <member name="T:LcmsNetData.Logging.ThreadedLogger`1">
            <summary>
            Class to basically run the logging on another thread as a producer-consumer queue, rather than creating a new task for every log message
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:LcmsNetData.Logging.ThreadedLogger`1.isShutdown">
            <summary>
            True if the logger has been shut down.
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.ThreadedLogger`1.ConsumeAll">
            <summary>
            Consume all items, continuing until the queue is shutdown
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.ThreadedLogger`1.AddItem(`0)">
            <summary>
            Add a new item to the queue (produce an item)
            </summary>
            <param name="item"></param>
            <returns>True if <paramref name="item"/> is null or was added; false if the logger is shutting down or shut down</returns>
        </member>
        <member name="M:LcmsNetData.Logging.ThreadedLogger`1.Dispose">
            <summary>
            Clean up
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.ThreadedLogger`1.Shutdown">
            <summary>
            Properly close down the threaded logging
            </summary>
        </member>
        <member name="M:LcmsNetData.Logging.ThreadedLogger`1.#ctor(System.Action{`0})">
            <summary>
            Create a consumer that will run on a separate thread than everything else for performance reasons
            </summary>
            <param name="actionOnConsume"></param>
        </member>
        <member name="T:LcmsNetData.MessageBoxDisplayExtension">
            <summary>
            Extension method for Window involving message box
            </summary>
        </member>
        <member name="M:LcmsNetData.MessageBoxDisplayExtension.ShowMessage(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result, complies with the specified options, and returns a result.
            </summary>
            <param name="window">Window for display context</param>
            <param name="messageBoxText">Text to display</param>
            <param name="caption">Title bar caption</param>
            <param name="button">Which button(s) to display</param>
            <param name="icon">Title bar icon</param>
            <param name="defaultResult">default result of the message box</param>
            <param name="options">message box options</param>
            <returns>Result specifying what button the user clicked</returns>
        </member>
        <member name="P:LcmsNetData.System.PersistDataPaths.AppName">
            <summary>
            Name of the app - used for ProgramData directory name
            </summary>
        </member>
        <member name="M:LcmsNetData.System.PersistDataPaths.SetAppName(System.String)">
            <summary>
            Sets the app name to a non-default value
            </summary>
            <param name="appName"></param>
        </member>
        <member name="P:LcmsNetData.System.PersistDataPaths.ProgramExeDirectory">
            <summary>
            The directory where the exe file is located, and where data may have been persisted before
            </summary>
        </member>
        <member name="P:LcmsNetData.System.PersistDataPaths.LocalDataPath">
            <summary>
            Gets the local data storage path; if the settings file does not contain a value for "LocalDataPath", defaults to %AppData%\[AppName]
            </summary>
        </member>
        <member name="P:LcmsNetData.System.PersistDataPaths.ProgramDataPath">
            <summary>
            Program data path; here for compatibility
            </summary>
        </member>
        <member name="M:LcmsNetData.System.PersistDataPaths.GetFileSavePath(System.String)">
            <summary>
            Get the path where the file should be saved
            </summary>
            <param name="fileSubPath"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetData.System.PersistDataPaths.GetFileLoadPath(System.String)">
            <summary>
            Get the full path of the provided file subPath that exists
            </summary>
            <param name="fileSubPath"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetData.System.PersistDataPaths.GetDirectorySavePath(System.String)">
            <summary>
            Get the path where the directory should be located
            </summary>
            <param name="directorySubPath"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetData.System.PersistDataPaths.GetDirectoryLoadPath(System.String)">
            <summary>
            Get the full path of the provided directory subPath that exists
            </summary>
            <param name="directorySubPath"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetData.System.PersistDataPaths.GetDirectoryLoadPathCheckContents(System.String)">
            <summary>
            Get the full path of the provided directory subPath that exists
            </summary>
            <param name="directorySubPath"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetData.System.PersistDataPaths.GetDirectoryLoadPathCheckFiles(System.String,System.String)">
            <summary>
            Get the full path of the provided directory subPath that exists
            </summary>
            <param name="directorySubPath"></param>
            <param name="fileFilter">file filter string</param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetData.System.TimeKeeper.ConvertToTimeZone(System.DateTime,System.String)">
            <summary>
            Convert a DateTime object to the specified time zone
            </summary>
            <param name="time">a DateTime object containing the date and time to convert</param>
            <param name="timeZoneId">a string representing the time zone to convert to</param>
            <returns>a DateTime object containing the date and time in the requested timezone</returns>
        </member>
        <member name="M:LcmsNetData.System.TimeKeeper.DoDateTimesSpanDaylightSavingsTransition(System.DateTime,System.DateTime)">
            <summary>
            Determine if two dates cross over a daylight savings time transition
            </summary>
            <param name="start">DateTime object containing the starting date and time</param>
            <param name="end">DateTime object containing the ending date and time</param>
            <returns>true if a DST transition occurs between the two DateTimes, false otherwise</returns>
        </member>
        <member name="M:LcmsNetData.System.TimeKeeper.ConvertToDateTime(System.TimeZoneInfo.TransitionTime,System.Int32)">
            <summary>
            convert a daylight savings transition rule to a date
            </summary>
            <param name="transition">a TransitionTime struct for a specific TimeZoneInfo(and thus a specific timezone)</param>
            <param name="year">An int representing the year to apply the rule to</param>
            <returns>A DateTime object containing the exact date and time the transition occurs for the specified year</returns>
        </member>
        <member name="P:LcmsNetData.System.TimeKeeper.Now">
            <summary>
            Get current time as defined by the currently selected timezone
            </summary>
            <remarks>The time will be adjusted for daylight savings, as appropriate</remarks>
        </member>
    </members>
</doc>
