<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LcmsNetSQLiteTools</name>
    </assembly>
    <members>
        <member name="M:LcmsNetSQLiteTools.ExtensionMethods.LimitStringDuplication(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs memory de-duplication of strings, since database reads can give us a large number of duplicated strings
            </summary>
            <param name="input"></param>
            <param name="deDuplicationDictionary"></param>
            <returns></returns>
        </member>
        <member name="T:LcmsNetSQLiteTools.DatabaseConnectionStringException">
            <summary>
            Custom exception for reporting invalid database connection string
            </summary>
        </member>
        <member name="T:LcmsNetSQLiteTools.DatabaseDataException">
            <summary>
             Custom exception for reporting problems during a database query
            </summary>
        </member>
        <member name="T:LcmsNetSQLiteTools.DatabaseStoredProcException">
            <summary>
            Custom exception for reporting errors during stored procedure execution
            </summary>
        </member>
        <member name="M:LcmsNetSQLiteTools.DatabaseStoredProcException.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="SPName">Name of stored procedure that returned error</param>
            <param name="RetCode">Stored procedure return code</param>
            <param name="ErrMsg">Error message returned by stored procedure</param>
        </member>
        <member name="P:LcmsNetSQLiteTools.DatabaseStoredProcException.ReturnCode">
            <summary>
            Stored procedure return code
            </summary>
        </member>
        <member name="P:LcmsNetSQLiteTools.DatabaseStoredProcException.ProcName">
            <summary>
            Name of stored procedure that returned error
            </summary>
        </member>
        <member name="P:LcmsNetSQLiteTools.DatabaseStoredProcException.ErrMessage">
            <summary>
            Error message returned by stored procedure
            </summary>
        </member>
        <member name="T:LcmsNetSQLiteTools.DatabaseTableTypes">
            <summary>
            Describes the available data table names
            </summary>
        </member>
        <member name="F:LcmsNetSQLiteTools.DatabaseTableTypes.ColumnList">
            <summary>
            Active LC Columns
            </summary>
        </member>
        <member name="F:LcmsNetSQLiteTools.DatabaseTableTypes.PUserList">
            <summary>
            A User that's associated with a Proposal
            </summary>
        </member>
        <member name="F:LcmsNetSQLiteTools.DatabaseTableTypes.PReferenceList">
            <summary>
            A cross reference of the PUser and a Proposal
            </summary>
        </member>
        <member name="P:LcmsNetSQLiteTools.PropertyToColumnMapping.PropertyColumnMapping.ColumnName">
            <summary>
            SQLite table column name
            </summary>
        </member>
        <member name="P:LcmsNetSQLiteTools.PropertyToColumnMapping.PropertyColumnMapping.PropertyType">
            <summary>
            The type of the property, for conversion handling
            </summary>
        </member>
        <member name="P:LcmsNetSQLiteTools.PropertyToColumnMapping.PropertyColumnMapping.ReadProperty">
            <summary>
            Method for reading the property
            </summary>
        </member>
        <member name="P:LcmsNetSQLiteTools.PropertyToColumnMapping.PropertyColumnMapping.SetProperty">
            <summary>
            Method for setting the property
            </summary>
        </member>
        <member name="P:LcmsNetSQLiteTools.PropertyToColumnMapping.PropertyColumnMapping.IsUniqueColumn">
            <summary>
            Is property is marked as a column with unique values
            </summary>
        </member>
        <member name="P:LcmsNetSQLiteTools.PropertyToColumnMapping.PropertyColumnMapping.DoStringDeDuplication">
            <summary>
            True if the property type is string and the property is not marked as a unique value
            </summary>
        </member>
        <member name="M:LcmsNetSQLiteTools.PropertyToColumnMapping.PropertyColumnMapping.#ctor(System.String,System.Type,System.Boolean,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="columnName">SQLite table column name</param>
            <param name="propertyType">Type of the property, for conversion handling</param>
            <param name="isUniqueColumn">If the column has a 'unique' constraint, or other reason to believe that duplicates never occur</param>
            <param name="readProperty">Method for reading the property</param>
            <param name="setProperty">Method for setting the property</param>
        </member>
        <member name="P:LcmsNetSQLiteTools.SQLiteCacheIO.CacheName">
            <summary>
            Cache file name or path
            </summary>
            <remarks>Starts off as a filename, but is changed to a path by BuildConnectionString</remarks>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.Initialize(System.String)">
            <summary>
            Initialize the cache, with the provided cache filename
            </summary>
            <param name="cacheName"></param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.GetConnection(System.String)">
            <summary>
            Get a SQLiteConnection, but limit how often we open a new connection
            </summary>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="T:LcmsNetSQLiteTools.SQLiteCacheIO.SQLiteConnectionWrapper">
            <summary>
            A SQLiteConnection wrapper that only disposes in certain circumstances
            </summary>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.SQLiteConnectionWrapper.#ctor(System.String)">
            <summary>
            Open a new connection, which will get closed on Dispose().
            </summary>
            <param name="connString"></param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.SQLiteConnectionWrapper.#ctor(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Wrap an existing connection, which will stay open on Dispose().
            </summary>
            <param name="existingConnection"></param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.VerifyTableExists(System.String,System.String)">
            <summary>
            Determines if a particular table exists in the SQLite database
            </summary>
            <param name="tableName">Name of the table to search for</param>
            <param name="connStr">Connection string for database</param>
            <returns>TRUE if table found; FALSE if not found or error</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.VerifyTableExists(System.String,System.String,System.Int32@)">
            <summary>
            Determines if a particular table exists in the SQLite database
            </summary>
            <param name="tableName">Name of the table to search for</param>
            <param name="connStr">Connection string for database</param>
            <param name="columnCount">Number of columns in the table</param>
            <returns>TRUE if table found; FALSE if not found or error</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.VerifyTableExists(System.String,System.String,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Determines if a particular table exists in the SQLite database
            </summary>
            <param name="tableName">Name of the table to search for</param>
            <param name="connStr">Connection string for database</param>
            <param name="columnCount">Number of columns in the table</param>
            <param name="rowCount">Number of rows in the table</param>
            <param name="getRowCount">If false, row count is skipped</param>
            <returns>TRUE if table found; FALSE if not found or error</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.VerifyTableFormat(System.String,System.String,System.String)">
            <summary>
            Determines if a particular table exists in the SQLite database, and is in the expected format (column names, data types, etc.)
            </summary>
            <param name="tableName">Name of the table to search for</param>
            <param name="connStr">Connection string for database</param>
            <param name="createCommand">Table creation text, to compare to the create command of the existing table</param>
            <returns>TRUE if table found and create command matches (ignore case); FALSE if not found or error</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.TableColumnNamesMatched(System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Check if the table has the correct column count and names
            </summary>
            <param name="tableName"></param>
            <param name="connStr"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.GetTableColumnNames(System.String,System.String,System.Int32@)">
            <summary>
            Get a list of column names for the specified table
            </summary>
            <param name="tableName"></param>
            <param name="connStr"></param>
            <param name="columnCount"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.ExecuteSQLiteCommand(System.String,System.String)">
            <summary>
            Executes specified SQLite command
            </summary>
            <param name="cmdStr">SQL statement to execute</param>
            <param name="connStr">Connection string for SQL database file</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.ExecuteSQLiteCommandScalar(System.String,System.String)">
            <summary>
            Executes specified SQLite command that returns a scalar value
            </summary>
            <param name="cmdStr">SQL command to execute</param>
            <param name="connStr">Connection string for SQLite database file</param>
            <returns>An object returned by the SQLite command - the value of the first row and column of the table; may be null.</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.GetSQLiteDataTable(System.String,System.String)">
            <summary>
            Retrieves a data table from a SQLite database
            </summary>
            <param name="cmdStr">SQL command to execute</param>
            <param name="connStr">Connection string for SQLite database file</param>
            <returns>A DataTable containing data specified by the SQL command</returns>
            <remarks>Works well, but it also uses more memory and processing time vs. reading directly to the output object</remarks>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.BuildCreatePropTableCmd(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Builds a CREATE TABLE command from the input string dictionary
            </summary>
            <param name="inpData">String list containing property names</param>
            <param name="tableName">Name of table to create</param>
            <returns>String consisting of a complete CREATE TABLE SQL statement</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.BuildGenericCreateTableCmd(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Generic method to build a CREATE TABLE command
            </summary>
            <param name="tableName">Name of table to create</param>
            <param name="colNames">String array containing column names</param>
            <param name="primaryKeyColumn">Optional: name of the column to create as the primary key</param>
            <param name="caseInsensitive">If true, 'COLLATE NOCASE' is added to column definitions</param>
            <returns>Complete CREATE TABLE command</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.GetTableName(LcmsNetSQLiteTools.DatabaseTableTypes)">
            <summary>
            Converts a type of table to the corresponding cache db table name
            </summary>
            <param name="tableType">DatabaseTableTypes specifying table to get name for</param>
            <returns>Name of db table</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.GetSingleColumnName(LcmsNetSQLiteTools.DatabaseTableTypes,System.String)">
            <summary>
            Get the name of the single column in a single-column table
            </summary>
            <param name="tableType"></param>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.PrepareMultiColumnTable(System.String,System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Checks for existing multi-column table, creates it if it doesn't exist, and optionally drops existing data
            </summary>
            <param name="tableName"></param>
            <param name="connStr"></param>
            <param name="dataType"></param>
            <param name="dropOnMismatch">If true, the table exists, and the column names don't match property names, drops and re-creates the table</param>
            <param name="clearExisting">If true and the table exists, the existing data will be truncated</param>
            <returns>True if table exists and is readable</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.PrepareMultiColumnTable(System.String,System.String,System.Collections.Generic.IEnumerable{LcmsNetSQLiteTools.PropertyToColumnMapping.PropertyColumnMapping},System.Boolean,System.Boolean)">
            <summary>
            Checks for existing multi-column table, creates it if it doesn't exist, and optionally drops existing data
            </summary>
            <param name="tableName"></param>
            <param name="connStr"></param>
            <param name="mappings"></param>
            <param name="dropOnMismatch">If true, the table exists, and the column names don't match property names, drops and re-creates the table</param>
            <param name="clearExisting">If true and the table exists, the existing data will be truncated</param>
            <returns>True if table exists and is readable</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.PrepareSingleColumnTable(LcmsNetSQLiteTools.DatabaseTableTypes,System.String,System.Boolean,System.Boolean)">
            <summary>
            Checks for existing single-column table, creates it if it doesn't exist, and optionally drops existing data
            </summary>
            <param name="tableType"></param>
            <param name="connStr"></param>
            <param name="dropOnMismatch">If true, the table exists, and the column name doesn't match desired name, drops and re-creates the table</param>
            <param name="clearExisting">If true and the table exists, the existing data will be truncated</param>
            <returns>True if table exists and is readable</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.CheckSingleColumnCacheTable(LcmsNetSQLiteTools.DatabaseTableTypes,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if a cache table exists, creating it if it doesn't (and writing the default data if there is no data present)
            </summary>
            <param name="tableType"></param>
            <param name="defaultData">Entries to add to the table if there are none present</param>
            <returns>table row count</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.DeleteBadCache(System.Boolean)">
            <summary>
            Delete a cache file that has issues so a good cache can be made it its place.
            It is the responsibility of the calling method to ensure no other database operations are occurring that could interfere.
            </summary>
            <param name="force">If true, deletes the cache regardless of the <see cref="P:LcmsNetSQLiteTools.SQLiteCacheIO.DatabaseImageBad"/> value</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.SetCacheLocation(System.String)">
            <summary>
            Sets the cache location to the path provided
            </summary>
            <param name="location">New path to location of queue</param>
            <remarks>If location is a filename (and not a path), then updates to use AppDataFolderName</remarks>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.CheckOrCreateCache(LcmsNetSQLiteTools.SQLiteCacheDefaultData)">
            <summary>
            Checks for an existing cache or creates a new one, and makes sure certain tables exist.
            </summary>
            <param name="defaultData"></param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.ReadMultiColumnDataFromCache``1(LcmsNetSQLiteTools.DatabaseTableTypes,System.Func{``0},System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            Read the data for a list from the cache, handling the in-memory cache appropriately
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableType"></param>
            <param name="newObjectCreator"></param>
            <param name="memoryCache"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.ReadMultiColumnDataFromCache``1(LcmsNetSQLiteTools.DatabaseTableTypes,System.Func{``0})">
            <summary>
            Create a list of objects with row data from a cache table
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="tableType">Table containing the properties</param>
            <param name="objectCreator">Method to create a new object of type <typeparamref name="T"/></param>
            <returns>List of items read from the table</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.ReadMultiColumnDataFromCache``1(LcmsNetSQLiteTools.DatabaseTableTypes,System.Func{``0},System.String)">
            <summary>
            Create a list of objects with row data from a cache table
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="tableType">Table containing the properties</param>
            <param name="objectCreator">Method to create a new object of type <typeparamref name="T"/></param>
            <param name="connString">SQLite database connection string</param>
            <returns>List of items read from the table</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.SaveMultiColumnListToCache``1(LcmsNetSQLiteTools.DatabaseTableTypes,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{``0})">
            <summary>
            Store the contents of a list in the specified table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableType">table the data is to be stored in</param>
            <param name="dataList">list of data to be stored</param>
            <param name="memoryCache">in-memory cache of the list</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.SaveMultiColumnListToCache``1(LcmsNetSQLiteTools.DatabaseTableTypes,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Store the contents of a list in the specified table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableType">table the data is to be stored in</param>
            <param name="dataList">list of data to be stored</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.SaveMultiColumnListToCache``1(LcmsNetSQLiteTools.DatabaseTableTypes,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Store the contents of a list in the specified table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableType">table the data is to be stored in</param>
            <param name="dataList">list of data to be stored</param>
            <param name="connStr">Connection string; used for export/save as</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.SaveSingleColumnListToCache(LcmsNetSQLiteTools.DatabaseTableTypes,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Generic method for saving a single column list to the cache db
            </summary>
            <param name="tableType">enumTableNames specifying table name suffix</param>
            <param name="listData">List of data for storing in table</param>
            <param name="memoryCache">List used for in-memory cache of contents</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.SaveSingleColumnListToCache(LcmsNetSQLiteTools.DatabaseTableTypes,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generic method for saving a single column list to the cache db
            </summary>
            <param name="tableType">enumTableNames specifying table name suffix</param>
            <param name="listData">List of data for storing in table</param>
            <remarks>Used with T_CartList, T_SeparationTypeSelected, T_LCColumnList, T_DatasetTypeList, T_DatasetList, and T_CartConfigNameSelected</remarks>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.CheckDatasetExists(System.String)">
            <summary>
            Checks if the provided dataset name exists in the cache, case-insensitive
            </summary>
            <param name="datasetName"></param>
            <returns>true if the dataset name exists</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.ReadSingleColumnListFromCache(LcmsNetSQLiteTools.DatabaseTableTypes,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Read a single-column list from the cache, handling management of an in-memory list
            </summary>
            <param name="tableType">DatabaseTableTypes specifying type of table to retrieve</param>
            <param name="memoryCache"></param>
            <param name="force"></param>
            <returns>List containing cached data</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.ReadSingleColumnListFromCacheCheckExceptions(LcmsNetSQLiteTools.DatabaseTableTypes)">
            <summary>
            Generic method for retrieving data from a single column table
            </summary>
            <param name="tableType">DatabaseTableTypes specifying type of table to retrieve</param>
            <returns>List containing cached data</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteCacheIO.ReadSingleColumnListFromCache(LcmsNetSQLiteTools.DatabaseTableTypes)">
            <summary>
            Generic method for retrieving data from a single column table
            </summary>
            <param name="tableType">DatabaseTableTypes specifying type of table to retrieve</param>
            <returns>List containing cached data</returns>
        </member>
        <member name="P:LcmsNetSQLiteTools.SQLiteTools.CacheName">
            <summary>
            Cache file name or path
            </summary>
            <remarks>Starts off as a filename, but is changed to a path by BuildConnectionString</remarks>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.Initialize(System.String)">
            <summary>
            Initialize the cache, with the provided cache filename
            </summary>
            <param name="cacheName"></param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.CloseConnection">
            <summary>
            Close the stored SQLite connection
            </summary>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.DeleteBadCache(System.Boolean)">
            <summary>
            Delete a cache file that has issues so a good cache can be made it its place.
            It is the responsibility of the calling method to ensure no other database operations are occurring that could interfere.
            </summary>
            <param name="force">If true, deletes the cache regardless of the <see cref="P:LcmsNetSQLiteTools.SQLiteTools.DatabaseImageBad"/> value</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SetCacheLocation(System.String)">
            <summary>
            Sets the cache location to the path provided
            </summary>
            <param name="location">New path to location of queue</param>
            <remarks>If location is a filename (and not a path), then updates to use AppDataFolderName</remarks>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetQueueFromCache``1(LcmsNetSQLiteTools.DatabaseTableTypes)">
            <summary>
            Retrieves a sample queue from cache database
            Connection string and database name are defined by defaults
            </summary>
            <param name="tableType">tableType enum specifying type of queue to retrieve</param>
            <returns>List containing queue data</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetQueueFromCache``1(LcmsNetSQLiteTools.DatabaseTableTypes,System.String)">
            <summary>
            Retrieves a sample queue from a SQLite database
            Overload requires connection string to be specified
            </summary>
            <param name="tableType">tableType enum specifying type of queue to retrieve</param>
            <param name="connectionString">Cache connection string</param>
            <returns>List containing queue data</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetCartNameList">
            <summary>
            Wrapper around generic retrieval method specifically for cart lists
            </summary>
            <returns>List containing cart names</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetCartConfigNameMap(System.Boolean)">
            <summary>
            Wrapper around generic retrieval method specifically for cart config name lists
            </summary>
            <param name="force">Force reload of data from cache, rather than using the in-memory copy of it</param>
            <returns>Mapping of cart names to possible cart config names</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetCartConfigNameList(System.Boolean)">
            <summary>
            Wrapper around generic retrieval method specifically for cart config name lists
            </summary>
            <param name="force">Force reload of data from cache, rather than using the in-memory copy of it</param>
            <returns>List containing cart config names</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetCartConfigNameList(System.String,System.Boolean)">
            <summary>
            Get the cart config name list for a specific cart
            </summary>
            <param name="cartName">Cart name</param>
            <param name="force">Force reload of data from cache, rather than using the in-memory copy of it</param>
            <returns>List containing cart config names</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetColumnList(System.Boolean)">
            <summary>
            Wrapper around generic retrieval method specifically for LC column lists
            </summary>
            <param name="force">Force reload of data from cache, rather than using the in-memory copy of it</param>
            <returns>List containing cart names</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetSepTypeList(System.Boolean)">
            <summary>
            Wrapper around generic retrieval method specifically for separation type lists
            </summary>
            <param name="force">Force reload of data from cache, rather than using the in-memory copy of it</param>
            <returns>List containing separation types</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetDatasetList">
            <summary>
            Wrapper around generic retrieval method specifically for dataset name lists
            </summary>
            <returns>List containing separation types</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.CheckDatasetExists(System.String)">
            <summary>
            Checks if the provided dataset name exists in the cache, case-insensitive
            </summary>
            <param name="datasetName"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetDatasetTypeList(System.Boolean)">
            <summary>
            Wrapper around generic retrieval method specifically for dataset type lists
            </summary>
            <param name="force">Force reload of data from cache, rather than using the in-memory copy of it</param>
            <returns>List containing dataset types</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetWorkPackageMap(System.Boolean)">
            <summary>
            Wrapper around generic retrieval method specifically for Work Package lists
            </summary>
            <param name="force">Force reload of data from cache, rather than using the in-memory copy of it</param>
            <returns>Mapping of Charge Codes to WorkPackageInfo objects</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetUserList(System.Boolean)">
            <summary>
            Gets user list from cache
            </summary>
            <param name="force">Force reload of data from cache, rather than using the in-memory copy of it</param>
            <returns>List of user data</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetInstrumentList(System.Boolean)">
            <summary>
            Gets a list of instruments from the cache
            </summary>
            <param name="force">Force reload of data from cache, rather than using the in-memory copy of it</param>
            <returns>List of instruments</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetDefaultCartConfigName">
            <summary>
            Retrieves the cached cart configuration name
            </summary>
            <returns>Cart configuration name</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetDefaultSeparationType">
            <summary>
            Retrieves the cached separation type
            </summary>
            <returns>Separation type</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveQueueToCache``1(System.Collections.Generic.IEnumerable{``0},LcmsNetSQLiteTools.DatabaseTableTypes)">
            <summary>
            Saves the contents of specified sample queue to the SQLite cache file
            Connection string and database name are defined by defaults
            </summary>
            <param name="queueData">List of SampleData containing the sample data to save</param>
            <param name="tableType">TableTypes enum specifying which queue is being saved</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveQueueToCache``1(System.Collections.Generic.IEnumerable{``0},LcmsNetSQLiteTools.DatabaseTableTypes,System.String)">
            <summary>
            Saves the contents of specified sample queue to an SQLite database file
            Overload requires database connection string be specified
            </summary>
            <param name="queueData">List containing the sample data to save</param>
            <param name="tableType">TableTypes enum specifying which queue is being saved</param>
            <param name="connStr">Connection string for database file</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveUserListToCache(System.Collections.Generic.IEnumerable{LcmsNetData.Data.UserInfo})">
            <summary>
            Saves a list of users to cache
            </summary>
            <param name="userList">List containing user data</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveExperimentListToCache(System.Collections.Generic.IEnumerable{LcmsNetData.Data.ExperimentData})">
            <summary>
            Save a list of experiments to cache
            </summary>
            <param name="expList"></param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveProposalUsers(System.Collections.Generic.IEnumerable{LcmsNetData.Data.ProposalUser},System.Collections.Generic.IEnumerable{LcmsNetData.Data.UserIDPIDCrossReferenceEntry},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{LcmsNetData.Data.UserIDPIDCrossReferenceEntry}})">
            <summary>
            Saves the Proposal Users list and a Proposal ID to Proposal User ID cross-reference
            list to the cache.
            </summary>
            <param name="users">A list of the Proposal Users to cache.</param>
            <param name="crossReferenceList">A list of cross references to cache.</param>
            <param name="pidIndexedReferenceList">
            A dictionary of cross reference lists that have been grouped by Proposal ID.
            </param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveInstListToCache(System.Collections.Generic.IEnumerable{LcmsNetData.Data.InstrumentInfo})">
            <summary>
            Saves a list of instruments to cache
            </summary>
            <param name="instList">List of InstrumentInfo containing instrument data</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveCartConfigListToCache(System.Collections.Generic.IEnumerable{LcmsNetData.Data.CartConfigInfo})">
            <summary>
            Saves a list of Cart_Configs (and associated Cart names) to cache
            </summary>
            <param name="cartConfigList">List containing cart config info.</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveWorkPackageListToCache(System.Collections.Generic.IEnumerable{LcmsNetData.Data.WorkPackageInfo})">
            <summary>
            Saves a list of WorkPackageInfo objects to cache
            </summary>
            <param name="workPackageList">List containing work package info.</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveCartListToCache(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a list of cart names to the SQLite cache
            </summary>
            <param name="cartNameList">Cart names</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveColumnListToCache(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a list of column names to the SQLite cache
            </summary>
            <param name="columnList">Column names</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveDatasetNameListToCache(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a list of Dataset names to the SQLite cache
            </summary>
            <param name="datasetNameList">Dataset names</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveDatasetTypeListToCache(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a list of dataset type names to the SQLite cache
            </summary>
            <param name="datasetTypeList">Dataset type names</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveSeparationTypeListToCache(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a list of separation types to the SQLite cache
            </summary>
            <param name="separationTypeList">Separation type names</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveSelectedCartConfigName(System.String)">
            <summary>
            Caches the cart configuration name that is currently selected for this cart
            </summary>
            <param name="cartConfigName">Cart configuration name</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveSelectedSeparationType(System.String)">
            <summary>
            Caches the separation type that is currently selected for this cart
            </summary>
            <param name="separationType">Separation type</param>
        </member>
    </members>
</doc>
