<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LcmsNetSQLiteTools</name>
    </assembly>
    <members>
        <member name="T:LcmsNetSQLiteTools.DatabaseConnectionStringException">
            <summary>
            Custom exception for reporting invalid database connection string
            </summary>
        </member>
        <member name="T:LcmsNetSQLiteTools.DatabaseDataException">
            <summary>
             Custom exception for reporting problems during a database query
            </summary>
        </member>
        <member name="T:LcmsNetSQLiteTools.DatabaseStoredProcException">
            <summary>
            Custom exception for reporting errors during stored procedure execution
            </summary>
        </member>
        <member name="M:LcmsNetSQLiteTools.DatabaseStoredProcException.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="SPName">Name of stored procedure that returned error</param>
            <param name="RetCode">Stored procedure return code</param>
            <param name="ErrMsg">Error message returned by stored procedure</param>
        </member>
        <member name="P:LcmsNetSQLiteTools.DatabaseStoredProcException.ReturnCode">
            <summary>
            Stored procedure return code
            </summary>
        </member>
        <member name="P:LcmsNetSQLiteTools.DatabaseStoredProcException.ProcName">
            <summary>
            Name of stored procedure that returned error
            </summary>
        </member>
        <member name="P:LcmsNetSQLiteTools.DatabaseStoredProcException.ErrMessage">
            <summary>
            Error message returned by stored procedure
            </summary>
        </member>
        <member name="T:LcmsNetSQLiteTools.DatabaseTableTypes">
            <summary>
            Describes the available data table names
            </summary>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:LcmsNetSQLiteTools.SQLiteTools.CacheName">
            <summary>
            Cache file name or path
            </summary>
            <remarks>Starts off as a filename, but is changed to a path by BuildConnectionString</remarks>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetConnection(System.String)">
            <summary>
            Get a SQLiteConnection, but limit how often we open a new connection
            </summary>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.CloseConnection">
            <summary>
            Close the stored SQLite connection
            </summary>
        </member>
        <member name="T:LcmsNetSQLiteTools.SQLiteTools.SQLiteConnectionWrapper">
            <summary>
            A SQLiteConnection wrapper that only disposes in certain circumstances
            </summary>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SQLiteConnectionWrapper.#ctor(System.String)">
            <summary>
            Open a new connection, which will get closed on Dispose().
            </summary>
            <param name="connString"></param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SQLiteConnectionWrapper.#ctor(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Wrap an existing connection, which will stay open on Dispose().
            </summary>
            <param name="existingConnection"></param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SetCacheLocation(System.String)">
            <summary>
            Sets the cache location to the path provided
            </summary>
            <param name="location">New path to location of queue</param>
            <remarks>If location is a filename (and not a path), then updates to use AppDataFolderName</remarks>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetQueueFromCache``1(LcmsNetSQLiteTools.DatabaseTableTypes)">
            <summary>
            Retrieves a sample queue from cache database
            Connection string and database name are defined by defaults
            </summary>
            <param name="tableType">tableType enum specifying type of queue to retrieve</param>
            <returns>List containing queue data</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetQueueFromCache``1(LcmsNetSQLiteTools.DatabaseTableTypes,System.String)">
            <summary>
            Retrieves a sample queue from a SQLite database
            Overload requires connection string to be specified
            </summary>
            <param name="tableType">tableType enum specifying type of queue to retrieve</param>
            <param name="connectionString">Cache connection string</param>
            <returns>List containing queue data</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetPropertiesFromCache(System.String,System.String)">
            <summary>
            Gets a list of string dictionary objects containing properties for each item in the cache
            </summary>
            <param name="tableName">Name of table containing the properties</param>
            <param name="connStr">Connection string</param>
            <returns>List with properties for each item in cache</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetPropertyDictionaryForSample(System.Data.DataRow,System.Data.DataColumnCollection)">
            <summary>
            Gets a string dictionary containing property names and values contained in
            a row of the cache data table
            </summary>
            <param name="RowOfValues">DataRow containing property values from table</param>
            <param name="TableColumns">Collection of data columns in table</param>
            <returns>Dictionary in property name, property value format</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.VerifyTableExists(System.String,System.String)">
            <summary>
            Determines if a particular table exists in the SQLite database
            </summary>
            <param name="tableName">Name of the table to search for</param>
            <param name="connStr">Connection string for database</param>
            <returns>TRUE if table found; FALSE if not found or error</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.VerifyTableExists(System.String,System.String,System.Int32@)">
            <summary>
            Determines if a particular table exists in the SQLite database
            </summary>
            <param name="tableName">Name of the table to search for</param>
            <param name="connStr">Connection string for database</param>
            <param name="columnCount">Number of columns in the table</param>
            <returns>TRUE if table found; FALSE if not found or error</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.VerifyTableExists(System.String,System.String,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Determines if a particular table exists in the SQLite database
            </summary>
            <param name="tableName">Name of the table to search for</param>
            <param name="connStr">Connection string for database</param>
            <param name="columnCount">Number of columns in the table</param>
            <param name="rowCount">Number of rows in the table</param>
            <param name="getRowCount">If false, row count is skipped</param>
            <returns>TRUE if table found; FALSE if not found or error</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.TableColumnNamesMatched(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Check if the table has the correct column count and names
            </summary>
            <param name="tableName"></param>
            <param name="connStr"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SavePropertiesToCache(System.Collections.Generic.IList{LcmsNetData.ICacheInterface},System.String,System.String,System.Boolean)">
            <summary>
            Saves a list of properties for an object to the cache database
            </summary>
            <param name="dataToCache">List of ICacheInterface objects to save properites for</param>
            <param name="tableName">Name of the table to save data in</param>
            <param name="connStr">Connection string</param>
            <param name="insertsIncludeFieldNames"></param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveQueueToCache``1(System.Collections.Generic.List{``0},LcmsNetSQLiteTools.DatabaseTableTypes)">
            <summary>
            Saves the contents of specified sample queue to the SQLite cache file
            Connection string and database name are defined by defaults
            </summary>
            <param name="queueData">List of SampleData containing the sample data to save</param>
            <param name="tableType">TableTypes enum specifying which queue is being saved</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveQueueToCache``1(System.Collections.Generic.List{``0},LcmsNetSQLiteTools.DatabaseTableTypes,System.String)">
            <summary>
            Saves the contents of specified sample queue to an SQLite database file
            Overload requires database connection string be specified
            </summary>
            <param name="queueData">List containing the sample data to save</param>
            <param name="tableType">TableTypes enum specifying which queue is being saved</param>
            <param name="connStr">Connection string for database file</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveUserListToCache(System.Collections.Generic.List{LcmsNetData.Data.UserInfo},System.Boolean)">
            <summary>
            Saves a list of users to cache
            </summary>
            <param name="userList">List containing user data</param>
            <param name="clearFirst">if true, the existing data will always be removed from the list; if false and <paramref name="userList"/>.Count is &lt;= to the number of existing rows, nothing is changed</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveExperimentListToCache(System.Collections.Generic.List{LcmsNetData.Data.ExperimentData},System.Boolean)">
            <summary>
            Save a list of experiments to cache
            </summary>
            <param name="expList"></param>
            <param name="clearFirst">if true, the existing data will always be removed from the list; if false and <paramref name="expList"/>.Count is &lt;= to the number of existing rows, nothing is changed</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveProposalUsers(System.Collections.Generic.List{LcmsNetData.Data.ProposalUser},System.Collections.Generic.List{LcmsNetData.Data.UserIDPIDCrossReferenceEntry},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{LcmsNetData.Data.UserIDPIDCrossReferenceEntry}},System.Boolean)">
            <summary>
            Saves the Proposal Users list and a Proposal ID to Proposal User ID cross-reference
            list to the cache.
            </summary>
            <param name="users">A list of the Proposal Users to cache.</param>
            <param name="crossReferenceList">A list of cross references to cache.</param>
            <param name="pidIndexedReferenceList">
            A dictionary of cross reference lists that have been grouped by Proposal ID.
            </param>
            <param name="clearFirst">if true, the existing data will always be removed from the list; if false and <paramref name="users"/>.Count is &lt;= to the number of existing rows, nothing is changed</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveInstListToCache(System.Collections.Generic.List{LcmsNetData.Data.InstrumentInfo},System.Boolean)">
            <summary>
            Saves a list of instruments to cache
            </summary>
            <param name="instList">List of InstrumentInfo containing instrument data</param>
            <param name="clearFirst">if true, the existing data will always be removed from the list; if false and <paramref name="instList"/>.Count is &lt;= to the number of existing rows, nothing is changed</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.ExecuteSQLiteCommand(System.String,System.String)">
            <summary>
            Executes specified SQLite command
            </summary>
            <param name="cmdStr">SQL statement to execute</param>
            <param name="connStr">Connection string for SQL database file</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.ExecuteSQLiteCmdsWithTransaction(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Executes a collection of SQL commands wrapped in a transaction to improve performance
            </summary>
            <param name="cmdList">List containing the commands to execute</param>
            <param name="connStr">Connection string</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetSQLiteDataTable(System.String,System.String)">
            <summary>
            Retrieves a data table from a SQLite database
            </summary>
            <param name="cmdStr">SQL command to execute</param>
            <param name="connStr">Connection string for SQLite database file</param>
            <returns>A DataTable containing data specfied by CmdStr</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.ScrubField(System.String)">
            <summary>
            Replaces characters in a string that are incompatible with SQLite
            </summary>
            <param name="InpString">String to clean</param>
            <returns>String compatible with SQLite</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.BuildInsertPropValueCmd(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Builds a INSERT command from the input string dictionary
            </summary>
            <param name="inpData">String dictionary containing property names and values</param>
            <param name="tableName">Name of table to insert values into</param>
            <param name="insertsIncludeFieldNames">When true, use the key names in inpData as the field names</param>
            <returns>String consisting of a complete INSERT SQL statement</returns>
            <remarks>Set insertsIncludeFieldNames to true when the data in inpData does not match all of the columns in the target table</remarks>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.BuildCreatePropTableCmd(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Builds a CREATE TABLE command from the input string dictionary
            </summary>
            <param name="inpData">String dictionary containing property names and values</param>
            <param name="tableName">Name of table to create</param>
            <returns>String consisting of a complete CREATE TABLE SQL statement</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetTableName(LcmsNetSQLiteTools.DatabaseTableTypes)">
            <summary>
            Converts a type of table to the corresponding cache db table name
            </summary>
            <param name="tableType">DatabaseTableTypes specifying table to get name for</param>
            <returns>Name of db table</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetCartNameList(System.Boolean)">
            <summary>
            Wrapper around generic retrieval method specifically for cart lists
            </summary>
            <returns>List containing cart names</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetCartNameList">
            <summary>
            Wrapper around generic retrieval method specifically for cart lists
            </summary>
            <returns>List containing cart names</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetCartConfigNameList(System.Boolean)">
            <summary>
            Wrapper around generic retrieval method specifically for cart config name lists
            </summary>
            <returns>List containing cart config names</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetCartConfigNameList(System.String,System.Boolean)">
            <summary>
            Get the cart config name list for a specific cart
            </summary>
            <returns>List containing cart config names</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetColumnList(System.Boolean)">
            <summary>
            Wrapper around generic retrieval method specifically for LC column lists
            </summary>
            <returns>List containing cart names</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetSepTypeList(System.Boolean)">
            <summary>
            Wrapper around generic retrieval method specifically for separation type lists
            </summary>
            <returns>List containing separation types</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetDatasetList">
            <summary>
            Wrapper around generic retrieval method specifically for dataset name lists
            </summary>
            <returns>List containing separation types</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetDatasetTypeList(System.Boolean)">
            <summary>
            Wrapper around generic retrieval method specifically for dataset type lists
            </summary>
            <returns>List containing dataset types</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetUserList(System.Boolean)">
            <summary>
            Gets user list from cache
            </summary>
            <returns>List of user data</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetInstrumentList(System.Boolean)">
            <summary>
            Gets a list of instruments from the cache
            </summary>
            <returns>List of instruments</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveSelectedCartConfigName(System.String)">
            <summary>
            Caches the cart configuration name that is currently selected for this cart
            </summary>
            <param name="cartConfigName">Cart configuration name</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetDefaultCartConfigName">
            <summary>
            Retrieves the cached cart configuration name
            </summary>
            <returns>Cart configuration name</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveSelectedSeparationType(System.String)">
            <summary>
            Caches the separation type that is currently selected for this cart
            </summary>
            <param name="separationType">Separation type</param>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetDefaultSeparationType">
            <summary>
            Retrieves the cached separation type
            </summary>
            <returns>Separation type</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.SaveSingleColumnListToCache(System.Collections.Generic.List{System.String},LcmsNetSQLiteTools.DatabaseTableTypes,System.Boolean)">
            <summary>
            Generic method for saving a single column list to the cache db
            </summary>
            <param name="tableType">enumTableNames specifying table name suffix</param>
            <param name="listData">List of data for storing in table</param>
            <param name="clearFirst">if true, the existing data will always be removed from the list; if false and <paramref name="listData"/>.Count is &lt;= to the number of existing rows, nothing is changed</param>
            <remarks>Used with T_CartList, T_SeparationTypeSelected, T_LCColumnList, T_DatasetTypeList, T_DatasetList, and T_CartConfigNameSelected</remarks>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.GetSingleColumnListFromCache(LcmsNetSQLiteTools.DatabaseTableTypes)">
            <summary>
            Generic method for retrieving data from a single column table
            </summary>
            <param name="tableType">DatabaseTableTypes specifying type of table to retrieve</param>
            <returns>List containing cached data</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.BuildGenericCreateTableCmd(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Generic method to build a CREATE TABLE command
            </summary>
            <param name="tableName">Name of table to create</param>
            <param name="ColNames">String array containing column names</param>
            <param name="primaryKeyColumn">Optional: name of the column to create as the primary key</param>
            <returns>Complete CREATE TABLE command</returns>
        </member>
        <member name="M:LcmsNetSQLiteTools.SQLiteTools.ClearCacheTable(System.String,System.String,System.Int32)">
            <summary>
            Clears a cache table
            </summary>
            <param name="tableName">Name of table to clear</param>
            <param name="connStr">Connection string</param>
            <param name="columnCountExpected">Expected number of columns; 0 to not validate column count</param>
            <remarks>If the actual column count is less than columnCountExpected, then the table is deleted (dropped)</remarks>
        </member>
    </members>
</doc>
